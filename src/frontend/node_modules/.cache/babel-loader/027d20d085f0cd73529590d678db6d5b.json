{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport { NAME_COLLAPSE } from '../../constants/components';\nimport { IS_BROWSER } from '../../constants/env';\nimport { EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT } from '../../constants/regex';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { addClass, getAttr, hasAttr, isDisabled, isTag, removeAttr, removeClass, removeStyle, requestAF, setAttr, setStyle } from '../../utils/dom';\nimport { getRootActionEventName, getRootEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { keys } from '../../utils/object'; // --- Constants ---\n// Classes to apply to trigger element\n\nvar CLASS_BV_TOGGLE_COLLAPSED = 'collapsed';\nvar CLASS_BV_TOGGLE_NOT_COLLAPSED = 'not-collapsed'; // Property key for handler storage\n\nvar BV_BASE = '__BV_toggle'; // Root event listener property (Function)\n\nvar BV_TOGGLE_ROOT_HANDLER = \"\".concat(BV_BASE, \"_HANDLER__\"); // Trigger element click handler property (Function)\n\nvar BV_TOGGLE_CLICK_HANDLER = \"\".concat(BV_BASE, \"_CLICK__\"); // Target visibility state property (Boolean)\n\nvar BV_TOGGLE_STATE = \"\".concat(BV_BASE, \"_STATE__\"); // Target ID list property (Array)\n\nvar BV_TOGGLE_TARGETS = \"\".concat(BV_BASE, \"_TARGETS__\"); // Commonly used strings\n\nvar STRING_FALSE = 'false';\nvar STRING_TRUE = 'true'; // Commonly used attribute names\n\nvar ATTR_ARIA_CONTROLS = 'aria-controls';\nvar ATTR_ARIA_EXPANDED = 'aria-expanded';\nvar ATTR_ROLE = 'role';\nvar ATTR_TABINDEX = 'tabindex'; // Commonly used style properties\n\nvar STYLE_OVERFLOW_ANCHOR = 'overflow-anchor'; // Emitted control event for collapse (emitted to collapse)\n\nvar ROOT_ACTION_EVENT_NAME_TOGGLE = getRootActionEventName(NAME_COLLAPSE, 'toggle'); // Listen to event for toggle state update (emitted by collapse)\n\nvar ROOT_EVENT_NAME_STATE = getRootEventName(NAME_COLLAPSE, 'state'); // Private event emitted on `$root` to ensure the toggle state is always synced\n// Gets emitted even if the state of b-collapse has not changed\n// This event is NOT to be documented as people should not be using it\n\nvar ROOT_EVENT_NAME_SYNC_STATE = getRootEventName(NAME_COLLAPSE, 'sync-state'); // Private event we send to collapse to request state update sync event\n\nvar ROOT_ACTION_EVENT_NAME_REQUEST_STATE = getRootActionEventName(NAME_COLLAPSE, 'request-state');\nvar KEYDOWN_KEY_CODES = [CODE_ENTER, CODE_SPACE]; // --- Helper methods ---\n\nvar isNonStandardTag = function isNonStandardTag(el) {\n  return !arrayIncludes(['button', 'a'], el.tagName.toLowerCase());\n};\n\nvar getTargets = function getTargets(_ref, el) {\n  var modifiers = _ref.modifiers,\n      arg = _ref.arg,\n      value = _ref.value; // Any modifiers are considered target IDs\n\n  var targets = keys(modifiers || {}); // If value is a string, split out individual targets (if space delimited)\n\n  value = isString(value) ? value.split(RX_SPACE_SPLIT) : value; // Support target ID as link href (`href=\"#id\"`)\n\n  if (isTag(el.tagName, 'a')) {\n    var href = getAttr(el, 'href') || '';\n\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''));\n    }\n  } // Add ID from `arg` (if provided), and support value\n  // as a single string ID or an array of string IDs\n  // If `value` is not an array or string, then it gets filtered out\n\n\n  concat(arg, value).forEach(function (t) {\n    return isString(t) && targets.push(t);\n  }); // Return only unique and truthy target IDs\n\n  return targets.filter(function (t, index, arr) {\n    return t && arr.indexOf(t) === index;\n  });\n};\n\nvar removeClickListener = function removeClickListener(el) {\n  var handler = el[BV_TOGGLE_CLICK_HANDLER];\n\n  if (handler) {\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n\n  el[BV_TOGGLE_CLICK_HANDLER] = null;\n};\n\nvar addClickListener = function addClickListener(el, vnode) {\n  removeClickListener(el);\n\n  if (vnode.context) {\n    var handler = function handler(event) {\n      if (!(event.type === 'keydown' && !arrayIncludes(KEYDOWN_KEY_CODES, event.keyCode)) && !isDisabled(el)) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n        targets.forEach(function (target) {\n          vnode.context.$root.$emit(ROOT_ACTION_EVENT_NAME_TOGGLE, target);\n        });\n      }\n    };\n\n    el[BV_TOGGLE_CLICK_HANDLER] = handler;\n    eventOn(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n    if (isNonStandardTag(el)) {\n      eventOn(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar removeRootListeners = function removeRootListeners(el, vnode) {\n  if (el[BV_TOGGLE_ROOT_HANDLER] && vnode.context) {\n    vnode.context.$root.$off([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], el[BV_TOGGLE_ROOT_HANDLER]);\n  }\n\n  el[BV_TOGGLE_ROOT_HANDLER] = null;\n};\n\nvar addRootListeners = function addRootListeners(el, vnode) {\n  removeRootListeners(el, vnode);\n\n  if (vnode.context) {\n    var handler = function handler(id, state) {\n      // `state` will be `true` if target is expanded\n      if (arrayIncludes(el[BV_TOGGLE_TARGETS] || [], id)) {\n        // Set/Clear 'collapsed' visibility class state\n        el[BV_TOGGLE_STATE] = state; // Set `aria-expanded` and class state on trigger element\n\n        setToggleState(el, state);\n      }\n    };\n\n    el[BV_TOGGLE_ROOT_HANDLER] = handler; // Listen for toggle state changes (public) and sync (private)\n\n    vnode.context.$root.$on([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], handler);\n  }\n};\n\nvar setToggleState = function setToggleState(el, state) {\n  // State refers to the visibility of the collapse/sidebar\n  if (state) {\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_TRUE);\n  } else {\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_FALSE);\n  }\n}; // Reset and remove a property from the provided element\n\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle directive updates\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  /* istanbul ignore next: should never happen */\n  if (!IS_BROWSER || !vnode.context) {\n    return;\n  } // If element is not a button or link, we add `role=\"button\"`\n  // and `tabindex=\"0\"` for accessibility reasons\n\n\n  if (isNonStandardTag(el)) {\n    if (!hasAttr(el, ATTR_ROLE)) {\n      setAttr(el, ATTR_ROLE, 'button');\n    }\n\n    if (!hasAttr(el, ATTR_TABINDEX)) {\n      setAttr(el, ATTR_TABINDEX, '0');\n    }\n  } // Ensure the collapse class and `aria-*` attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or its contents)\n\n\n  setToggleState(el, el[BV_TOGGLE_STATE]); // Parse list of target IDs\n\n  var targets = getTargets(binding, el); // Ensure the `aria-controls` hasn't been overwritten\n  // or removed when vnode updates\n  // Also ensure to set `overflow-anchor` to `none` to prevent\n  // the browser's scroll anchoring behavior\n\n  /* istanbul ignore else */\n\n  if (targets.length > 0) {\n    setAttr(el, ATTR_ARIA_CONTROLS, targets.join(' '));\n    setStyle(el, STYLE_OVERFLOW_ANCHOR, 'none');\n  } else {\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  } // Add/Update our click listener(s)\n  // Wrap in a `requestAF()` to allow any previous\n  // click handling to occur first\n\n\n  requestAF(function () {\n    addClickListener(el, vnode);\n  }); // If targets array has changed, update\n\n  if (!looseEqual(targets, el[BV_TOGGLE_TARGETS])) {\n    // Update targets array to element storage\n    el[BV_TOGGLE_TARGETS] = targets; // Ensure `aria-controls` is up to date\n    // Request a state update from targets so that we can\n    // ensure expanded state is correct (in most cases)\n\n    targets.forEach(function (target) {\n      vnode.context.$root.$emit(ROOT_ACTION_EVENT_NAME_REQUEST_STATE, target);\n    });\n  }\n};\n/*\n * Export our directive\n */\n\n\nexport var VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    // State is initially collapsed until we receive a state event\n    el[BV_TOGGLE_STATE] = false; // Assume no targets initially\n\n    el[BV_TOGGLE_TARGETS] = []; // Add our root listeners\n\n    addRootListeners(el, vnode); // Initial update of trigger\n\n    handleUpdate(el, binding, vnode);\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode) {\n    removeClickListener(el); // Remove our $root listener\n\n    removeRootListeners(el, vnode); // Reset custom props\n\n    resetProp(el, BV_TOGGLE_ROOT_HANDLER);\n    resetProp(el, BV_TOGGLE_CLICK_HANDLER);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs/styles\n\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    removeAttr(el, ATTR_ARIA_EXPANDED);\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeAttr(el, ATTR_ROLE);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  }\n};","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/directives/toggle/toggle.js"],"names":["NAME_COLLAPSE","IS_BROWSER","EVENT_OPTIONS_PASSIVE","CODE_ENTER","CODE_SPACE","RX_HASH","RX_HASH_ID","RX_SPACE_SPLIT","arrayIncludes","concat","addClass","getAttr","hasAttr","isDisabled","isTag","removeAttr","removeClass","removeStyle","requestAF","setAttr","setStyle","getRootActionEventName","getRootEventName","eventOn","eventOff","isString","looseEqual","keys","CLASS_BV_TOGGLE_COLLAPSED","CLASS_BV_TOGGLE_NOT_COLLAPSED","BV_BASE","BV_TOGGLE_ROOT_HANDLER","BV_TOGGLE_CLICK_HANDLER","BV_TOGGLE_STATE","BV_TOGGLE_TARGETS","STRING_FALSE","STRING_TRUE","ATTR_ARIA_CONTROLS","ATTR_ARIA_EXPANDED","ATTR_ROLE","ATTR_TABINDEX","STYLE_OVERFLOW_ANCHOR","ROOT_ACTION_EVENT_NAME_TOGGLE","ROOT_EVENT_NAME_STATE","ROOT_EVENT_NAME_SYNC_STATE","ROOT_ACTION_EVENT_NAME_REQUEST_STATE","KEYDOWN_KEY_CODES","isNonStandardTag","el","tagName","toLowerCase","getTargets","_ref","modifiers","arg","value","targets","split","href","test","push","replace","forEach","t","filter","index","arr","indexOf","removeClickListener","handler","addClickListener","vnode","context","event","type","keyCode","target","$root","$emit","removeRootListeners","$off","addRootListeners","id","state","setToggleState","$on","resetProp","prop","handleUpdate","binding","length","join","VBToggle","bind","componentUpdated","updated","unbind"],"mappings":"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","sourcesContent":["import { NAME_COLLAPSE } from '../../constants/components';\nimport { IS_BROWSER } from '../../constants/env';\nimport { EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { RX_HASH, RX_HASH_ID, RX_SPACE_SPLIT } from '../../constants/regex';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { addClass, getAttr, hasAttr, isDisabled, isTag, removeAttr, removeClass, removeStyle, requestAF, setAttr, setStyle } from '../../utils/dom';\nimport { getRootActionEventName, getRootEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { keys } from '../../utils/object'; // --- Constants ---\n// Classes to apply to trigger element\n\nvar CLASS_BV_TOGGLE_COLLAPSED = 'collapsed';\nvar CLASS_BV_TOGGLE_NOT_COLLAPSED = 'not-collapsed'; // Property key for handler storage\n\nvar BV_BASE = '__BV_toggle'; // Root event listener property (Function)\n\nvar BV_TOGGLE_ROOT_HANDLER = \"\".concat(BV_BASE, \"_HANDLER__\"); // Trigger element click handler property (Function)\n\nvar BV_TOGGLE_CLICK_HANDLER = \"\".concat(BV_BASE, \"_CLICK__\"); // Target visibility state property (Boolean)\n\nvar BV_TOGGLE_STATE = \"\".concat(BV_BASE, \"_STATE__\"); // Target ID list property (Array)\n\nvar BV_TOGGLE_TARGETS = \"\".concat(BV_BASE, \"_TARGETS__\"); // Commonly used strings\n\nvar STRING_FALSE = 'false';\nvar STRING_TRUE = 'true'; // Commonly used attribute names\n\nvar ATTR_ARIA_CONTROLS = 'aria-controls';\nvar ATTR_ARIA_EXPANDED = 'aria-expanded';\nvar ATTR_ROLE = 'role';\nvar ATTR_TABINDEX = 'tabindex'; // Commonly used style properties\n\nvar STYLE_OVERFLOW_ANCHOR = 'overflow-anchor'; // Emitted control event for collapse (emitted to collapse)\n\nvar ROOT_ACTION_EVENT_NAME_TOGGLE = getRootActionEventName(NAME_COLLAPSE, 'toggle'); // Listen to event for toggle state update (emitted by collapse)\n\nvar ROOT_EVENT_NAME_STATE = getRootEventName(NAME_COLLAPSE, 'state'); // Private event emitted on `$root` to ensure the toggle state is always synced\n// Gets emitted even if the state of b-collapse has not changed\n// This event is NOT to be documented as people should not be using it\n\nvar ROOT_EVENT_NAME_SYNC_STATE = getRootEventName(NAME_COLLAPSE, 'sync-state'); // Private event we send to collapse to request state update sync event\n\nvar ROOT_ACTION_EVENT_NAME_REQUEST_STATE = getRootActionEventName(NAME_COLLAPSE, 'request-state');\nvar KEYDOWN_KEY_CODES = [CODE_ENTER, CODE_SPACE]; // --- Helper methods ---\n\nvar isNonStandardTag = function isNonStandardTag(el) {\n  return !arrayIncludes(['button', 'a'], el.tagName.toLowerCase());\n};\n\nvar getTargets = function getTargets(_ref, el) {\n  var modifiers = _ref.modifiers,\n      arg = _ref.arg,\n      value = _ref.value;\n  // Any modifiers are considered target IDs\n  var targets = keys(modifiers || {}); // If value is a string, split out individual targets (if space delimited)\n\n  value = isString(value) ? value.split(RX_SPACE_SPLIT) : value; // Support target ID as link href (`href=\"#id\"`)\n\n  if (isTag(el.tagName, 'a')) {\n    var href = getAttr(el, 'href') || '';\n\n    if (RX_HASH_ID.test(href)) {\n      targets.push(href.replace(RX_HASH, ''));\n    }\n  } // Add ID from `arg` (if provided), and support value\n  // as a single string ID or an array of string IDs\n  // If `value` is not an array or string, then it gets filtered out\n\n\n  concat(arg, value).forEach(function (t) {\n    return isString(t) && targets.push(t);\n  }); // Return only unique and truthy target IDs\n\n  return targets.filter(function (t, index, arr) {\n    return t && arr.indexOf(t) === index;\n  });\n};\n\nvar removeClickListener = function removeClickListener(el) {\n  var handler = el[BV_TOGGLE_CLICK_HANDLER];\n\n  if (handler) {\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n\n  el[BV_TOGGLE_CLICK_HANDLER] = null;\n};\n\nvar addClickListener = function addClickListener(el, vnode) {\n  removeClickListener(el);\n\n  if (vnode.context) {\n    var handler = function handler(event) {\n      if (!(event.type === 'keydown' && !arrayIncludes(KEYDOWN_KEY_CODES, event.keyCode)) && !isDisabled(el)) {\n        var targets = el[BV_TOGGLE_TARGETS] || [];\n        targets.forEach(function (target) {\n          vnode.context.$root.$emit(ROOT_ACTION_EVENT_NAME_TOGGLE, target);\n        });\n      }\n    };\n\n    el[BV_TOGGLE_CLICK_HANDLER] = handler;\n    eventOn(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n    if (isNonStandardTag(el)) {\n      eventOn(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar removeRootListeners = function removeRootListeners(el, vnode) {\n  if (el[BV_TOGGLE_ROOT_HANDLER] && vnode.context) {\n    vnode.context.$root.$off([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], el[BV_TOGGLE_ROOT_HANDLER]);\n  }\n\n  el[BV_TOGGLE_ROOT_HANDLER] = null;\n};\n\nvar addRootListeners = function addRootListeners(el, vnode) {\n  removeRootListeners(el, vnode);\n\n  if (vnode.context) {\n    var handler = function handler(id, state) {\n      // `state` will be `true` if target is expanded\n      if (arrayIncludes(el[BV_TOGGLE_TARGETS] || [], id)) {\n        // Set/Clear 'collapsed' visibility class state\n        el[BV_TOGGLE_STATE] = state; // Set `aria-expanded` and class state on trigger element\n\n        setToggleState(el, state);\n      }\n    };\n\n    el[BV_TOGGLE_ROOT_HANDLER] = handler; // Listen for toggle state changes (public) and sync (private)\n\n    vnode.context.$root.$on([ROOT_EVENT_NAME_STATE, ROOT_EVENT_NAME_SYNC_STATE], handler);\n  }\n};\n\nvar setToggleState = function setToggleState(el, state) {\n  // State refers to the visibility of the collapse/sidebar\n  if (state) {\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_TRUE);\n  } else {\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    addClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    setAttr(el, ATTR_ARIA_EXPANDED, STRING_FALSE);\n  }\n}; // Reset and remove a property from the provided element\n\n\nvar resetProp = function resetProp(el, prop) {\n  el[prop] = null;\n  delete el[prop];\n}; // Handle directive updates\n\n\nvar handleUpdate = function handleUpdate(el, binding, vnode) {\n  /* istanbul ignore next: should never happen */\n  if (!IS_BROWSER || !vnode.context) {\n    return;\n  } // If element is not a button or link, we add `role=\"button\"`\n  // and `tabindex=\"0\"` for accessibility reasons\n\n\n  if (isNonStandardTag(el)) {\n    if (!hasAttr(el, ATTR_ROLE)) {\n      setAttr(el, ATTR_ROLE, 'button');\n    }\n\n    if (!hasAttr(el, ATTR_TABINDEX)) {\n      setAttr(el, ATTR_TABINDEX, '0');\n    }\n  } // Ensure the collapse class and `aria-*` attributes persist\n  // after element is updated (either by parent re-rendering\n  // or changes to this element or its contents)\n\n\n  setToggleState(el, el[BV_TOGGLE_STATE]); // Parse list of target IDs\n\n  var targets = getTargets(binding, el); // Ensure the `aria-controls` hasn't been overwritten\n  // or removed when vnode updates\n  // Also ensure to set `overflow-anchor` to `none` to prevent\n  // the browser's scroll anchoring behavior\n\n  /* istanbul ignore else */\n\n  if (targets.length > 0) {\n    setAttr(el, ATTR_ARIA_CONTROLS, targets.join(' '));\n    setStyle(el, STYLE_OVERFLOW_ANCHOR, 'none');\n  } else {\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  } // Add/Update our click listener(s)\n  // Wrap in a `requestAF()` to allow any previous\n  // click handling to occur first\n\n\n  requestAF(function () {\n    addClickListener(el, vnode);\n  }); // If targets array has changed, update\n\n  if (!looseEqual(targets, el[BV_TOGGLE_TARGETS])) {\n    // Update targets array to element storage\n    el[BV_TOGGLE_TARGETS] = targets; // Ensure `aria-controls` is up to date\n    // Request a state update from targets so that we can\n    // ensure expanded state is correct (in most cases)\n\n    targets.forEach(function (target) {\n      vnode.context.$root.$emit(ROOT_ACTION_EVENT_NAME_REQUEST_STATE, target);\n    });\n  }\n};\n/*\n * Export our directive\n */\n\n\nexport var VBToggle = {\n  bind: function bind(el, binding, vnode) {\n    // State is initially collapsed until we receive a state event\n    el[BV_TOGGLE_STATE] = false; // Assume no targets initially\n\n    el[BV_TOGGLE_TARGETS] = []; // Add our root listeners\n\n    addRootListeners(el, vnode); // Initial update of trigger\n\n    handleUpdate(el, binding, vnode);\n  },\n  componentUpdated: handleUpdate,\n  updated: handleUpdate,\n  unbind: function unbind(el, binding, vnode) {\n    removeClickListener(el); // Remove our $root listener\n\n    removeRootListeners(el, vnode); // Reset custom props\n\n    resetProp(el, BV_TOGGLE_ROOT_HANDLER);\n    resetProp(el, BV_TOGGLE_CLICK_HANDLER);\n    resetProp(el, BV_TOGGLE_STATE);\n    resetProp(el, BV_TOGGLE_TARGETS); // Reset classes/attrs/styles\n\n    removeClass(el, CLASS_BV_TOGGLE_COLLAPSED);\n    removeClass(el, CLASS_BV_TOGGLE_NOT_COLLAPSED);\n    removeAttr(el, ATTR_ARIA_EXPANDED);\n    removeAttr(el, ATTR_ARIA_CONTROLS);\n    removeAttr(el, ATTR_ROLE);\n    removeStyle(el, STYLE_OVERFLOW_ANCHOR);\n  }\n};"]},"metadata":{},"sourceType":"module"}