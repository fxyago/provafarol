{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n} // v-b-visible\n// Private visibility check directive\n// Based on IntersectionObserver\n//\n// Usage:\n//  v-b-visibility.<margin>.<once>=\"<callback>\"\n//\n//  Value:\n//  <callback>: method to be called when visibility state changes, receives one arg:\n//     true:  element is visible\n//     false: element is not visible\n//     null:  IntersectionObserver not supported\n//\n//  Modifiers:\n//    <margin>: a positive decimal value of pixels away from viewport edge\n//              before being considered \"visible\". default is 0\n//    <once>:   keyword 'once', meaning when the element becomes visible and\n//              callback is called observation/notification will stop.\n//\n// When used in a render function:\n// export default {\n//   directives: { 'b-visible': VBVisible },\n//   render(h) {\n//     h(\n//       'div',\n//       {\n//         directives: [\n//           { name: 'b-visible', value=this.callback, modifiers: { '123':true, 'once':true } }\n//         ]\n//       }\n//     )\n//   }\n\n\nimport { RX_DIGITS } from '../../constants/regex';\nimport { requestAF } from '../../utils/dom';\nimport { isFunction } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { clone, keys } from '../../utils/object';\nvar OBSERVER_PROP_NAME = '__bv__visibility_observer';\n\nvar VisibilityObserver = /*#__PURE__*/function () {\n  function VisibilityObserver(el, options, vnode) {\n    _classCallCheck(this, VisibilityObserver);\n\n    this.el = el;\n    this.callback = options.callback;\n    this.margin = options.margin || 0;\n    this.once = options.once || false;\n    this.observer = null;\n    this.visible = undefined;\n    this.doneOnce = false; // Create the observer instance (if possible)\n\n    this.createObserver(vnode);\n  }\n\n  _createClass(VisibilityObserver, [{\n    key: \"createObserver\",\n    value: function createObserver(vnode) {\n      var _this = this; // Remove any previous observer\n\n\n      if (this.observer) {\n        /* istanbul ignore next */\n        this.stop();\n      } // Should only be called once and `callback` prop should be a function\n\n\n      if (this.doneOnce || !isFunction(this.callback)) {\n        /* istanbul ignore next */\n        return;\n      } // Create the observer instance\n\n\n      try {\n        // Future: Possibly add in other modifiers for left/right/top/bottom\n        // offsets, root element reference, and thresholds\n        this.observer = new IntersectionObserver(this.handler.bind(this), {\n          // `null` = 'viewport'\n          root: null,\n          // Pixels away from view port to consider \"visible\"\n          rootMargin: this.margin,\n          // Intersection ratio of el and root (as a value from 0 to 1)\n          threshold: 0\n        });\n      } catch (_unused) {\n        // No IntersectionObserver support, so just stop trying to observe\n        this.doneOnce = true;\n        this.observer = undefined;\n        this.callback(null);\n        return;\n      } // Start observing in a `$nextTick()` (to allow DOM to complete rendering)\n\n      /* istanbul ignore next: IntersectionObserver not supported in JSDOM */\n\n\n      vnode.context.$nextTick(function () {\n        requestAF(function () {\n          // Placed in an `if` just in case we were destroyed before\n          // this `requestAnimationFrame` runs\n          if (_this.observer) {\n            _this.observer.observe(_this.el);\n          }\n        });\n      });\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"handler\",\n    value: function handler(entries) {\n      var entry = entries ? entries[0] : {};\n      var isIntersecting = Boolean(entry.isIntersecting || entry.intersectionRatio > 0.0);\n\n      if (isIntersecting !== this.visible) {\n        this.visible = isIntersecting;\n        this.callback(isIntersecting);\n\n        if (this.once && this.visible) {\n          this.doneOnce = true;\n          this.stop();\n        }\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      /* istanbul ignore next */\n      this.observer && this.observer.disconnect();\n      this.observer = null;\n    }\n  }]);\n\n  return VisibilityObserver;\n}();\n\nvar destroy = function destroy(el) {\n  var observer = el[OBSERVER_PROP_NAME];\n\n  if (observer && observer.stop) {\n    observer.stop();\n  }\n\n  delete el[OBSERVER_PROP_NAME];\n};\n\nvar bind = function bind(el, _ref, vnode) {\n  var value = _ref.value,\n      modifiers = _ref.modifiers; // `value` is the callback function\n\n  var options = {\n    margin: '0px',\n    once: false,\n    callback: value\n  }; // Parse modifiers\n\n  keys(modifiers).forEach(function (mod) {\n    /* istanbul ignore else: Until <b-img-lazy> is switched to use this directive */\n    if (RX_DIGITS.test(mod)) {\n      options.margin = \"\".concat(mod, \"px\");\n    } else if (mod.toLowerCase() === 'once') {\n      options.once = true;\n    }\n  }); // Destroy any previous observer\n\n  destroy(el); // Create new observer\n\n  el[OBSERVER_PROP_NAME] = new VisibilityObserver(el, options, vnode); // Store the current modifiers on the object (cloned)\n\n  el[OBSERVER_PROP_NAME]._prevModifiers = clone(modifiers);\n}; // When the directive options may have been updated (or element)\n\n\nvar componentUpdated = function componentUpdated(el, _ref2, vnode) {\n  var value = _ref2.value,\n      oldValue = _ref2.oldValue,\n      modifiers = _ref2.modifiers; // Compare value/oldValue and modifiers to see if anything has changed\n  // and if so, destroy old observer and create new observer\n\n  /* istanbul ignore next */\n\n  modifiers = clone(modifiers);\n  /* istanbul ignore next */\n\n  if (el && (value !== oldValue || !el[OBSERVER_PROP_NAME] || !looseEqual(modifiers, el[OBSERVER_PROP_NAME]._prevModifiers))) {\n    // Re-bind on element\n    bind(el, {\n      value: value,\n      modifiers: modifiers\n    }, vnode);\n  }\n}; // When directive un-binds from element\n\n\nvar unbind = function unbind(el) {\n  // Remove the observer\n  destroy(el);\n}; // Export the directive\n\n\nexport var VBVisible = {\n  bind: bind,\n  componentUpdated: componentUpdated,\n  unbind: unbind\n};","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/directives/visible/visible.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","protoProps","staticProps","prototype","RX_DIGITS","requestAF","isFunction","looseEqual","clone","keys","OBSERVER_PROP_NAME","VisibilityObserver","el","options","vnode","callback","margin","once","observer","visible","undefined","doneOnce","createObserver","value","_this","stop","IntersectionObserver","handler","bind","root","rootMargin","threshold","_unused","context","$nextTick","observe","entries","entry","isIntersecting","Boolean","intersectionRatio","disconnect","destroy","_ref","modifiers","forEach","mod","test","concat","toLowerCase","_prevModifiers","componentUpdated","_ref2","oldValue","unbind","VBVisible"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// v-b-visible\n// Private visibility check directive\n// Based on IntersectionObserver\n//\n// Usage:\n//  v-b-visibility.<margin>.<once>=\"<callback>\"\n//\n//  Value:\n//  <callback>: method to be called when visibility state changes, receives one arg:\n//     true:  element is visible\n//     false: element is not visible\n//     null:  IntersectionObserver not supported\n//\n//  Modifiers:\n//    <margin>: a positive decimal value of pixels away from viewport edge\n//              before being considered \"visible\". default is 0\n//    <once>:   keyword 'once', meaning when the element becomes visible and\n//              callback is called observation/notification will stop.\n//\n// When used in a render function:\n// export default {\n//   directives: { 'b-visible': VBVisible },\n//   render(h) {\n//     h(\n//       'div',\n//       {\n//         directives: [\n//           { name: 'b-visible', value=this.callback, modifiers: { '123':true, 'once':true } }\n//         ]\n//       }\n//     )\n//   }\nimport { RX_DIGITS } from '../../constants/regex';\nimport { requestAF } from '../../utils/dom';\nimport { isFunction } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { clone, keys } from '../../utils/object';\nvar OBSERVER_PROP_NAME = '__bv__visibility_observer';\n\nvar VisibilityObserver = /*#__PURE__*/function () {\n  function VisibilityObserver(el, options, vnode) {\n    _classCallCheck(this, VisibilityObserver);\n\n    this.el = el;\n    this.callback = options.callback;\n    this.margin = options.margin || 0;\n    this.once = options.once || false;\n    this.observer = null;\n    this.visible = undefined;\n    this.doneOnce = false; // Create the observer instance (if possible)\n\n    this.createObserver(vnode);\n  }\n\n  _createClass(VisibilityObserver, [{\n    key: \"createObserver\",\n    value: function createObserver(vnode) {\n      var _this = this;\n\n      // Remove any previous observer\n      if (this.observer) {\n        /* istanbul ignore next */\n        this.stop();\n      } // Should only be called once and `callback` prop should be a function\n\n\n      if (this.doneOnce || !isFunction(this.callback)) {\n        /* istanbul ignore next */\n        return;\n      } // Create the observer instance\n\n\n      try {\n        // Future: Possibly add in other modifiers for left/right/top/bottom\n        // offsets, root element reference, and thresholds\n        this.observer = new IntersectionObserver(this.handler.bind(this), {\n          // `null` = 'viewport'\n          root: null,\n          // Pixels away from view port to consider \"visible\"\n          rootMargin: this.margin,\n          // Intersection ratio of el and root (as a value from 0 to 1)\n          threshold: 0\n        });\n      } catch (_unused) {\n        // No IntersectionObserver support, so just stop trying to observe\n        this.doneOnce = true;\n        this.observer = undefined;\n        this.callback(null);\n        return;\n      } // Start observing in a `$nextTick()` (to allow DOM to complete rendering)\n\n      /* istanbul ignore next: IntersectionObserver not supported in JSDOM */\n\n\n      vnode.context.$nextTick(function () {\n        requestAF(function () {\n          // Placed in an `if` just in case we were destroyed before\n          // this `requestAnimationFrame` runs\n          if (_this.observer) {\n            _this.observer.observe(_this.el);\n          }\n        });\n      });\n    }\n    /* istanbul ignore next */\n\n  }, {\n    key: \"handler\",\n    value: function handler(entries) {\n      var entry = entries ? entries[0] : {};\n      var isIntersecting = Boolean(entry.isIntersecting || entry.intersectionRatio > 0.0);\n\n      if (isIntersecting !== this.visible) {\n        this.visible = isIntersecting;\n        this.callback(isIntersecting);\n\n        if (this.once && this.visible) {\n          this.doneOnce = true;\n          this.stop();\n        }\n      }\n    }\n  }, {\n    key: \"stop\",\n    value: function stop() {\n      /* istanbul ignore next */\n      this.observer && this.observer.disconnect();\n      this.observer = null;\n    }\n  }]);\n\n  return VisibilityObserver;\n}();\n\nvar destroy = function destroy(el) {\n  var observer = el[OBSERVER_PROP_NAME];\n\n  if (observer && observer.stop) {\n    observer.stop();\n  }\n\n  delete el[OBSERVER_PROP_NAME];\n};\n\nvar bind = function bind(el, _ref, vnode) {\n  var value = _ref.value,\n      modifiers = _ref.modifiers;\n  // `value` is the callback function\n  var options = {\n    margin: '0px',\n    once: false,\n    callback: value\n  }; // Parse modifiers\n\n  keys(modifiers).forEach(function (mod) {\n    /* istanbul ignore else: Until <b-img-lazy> is switched to use this directive */\n    if (RX_DIGITS.test(mod)) {\n      options.margin = \"\".concat(mod, \"px\");\n    } else if (mod.toLowerCase() === 'once') {\n      options.once = true;\n    }\n  }); // Destroy any previous observer\n\n  destroy(el); // Create new observer\n\n  el[OBSERVER_PROP_NAME] = new VisibilityObserver(el, options, vnode); // Store the current modifiers on the object (cloned)\n\n  el[OBSERVER_PROP_NAME]._prevModifiers = clone(modifiers);\n}; // When the directive options may have been updated (or element)\n\n\nvar componentUpdated = function componentUpdated(el, _ref2, vnode) {\n  var value = _ref2.value,\n      oldValue = _ref2.oldValue,\n      modifiers = _ref2.modifiers;\n  // Compare value/oldValue and modifiers to see if anything has changed\n  // and if so, destroy old observer and create new observer\n\n  /* istanbul ignore next */\n  modifiers = clone(modifiers);\n  /* istanbul ignore next */\n\n  if (el && (value !== oldValue || !el[OBSERVER_PROP_NAME] || !looseEqual(modifiers, el[OBSERVER_PROP_NAME]._prevModifiers))) {\n    // Re-bind on element\n    bind(el, {\n      value: value,\n      modifiers: modifiers\n    }, vnode);\n  }\n}; // When directive un-binds from element\n\n\nvar unbind = function unbind(el) {\n  // Remove the observer\n  destroy(el);\n}; // Export the directive\n\n\nexport var VBVisible = {\n  bind: bind,\n  componentUpdated: componentUpdated,\n  unbind: unbind\n};"]},"metadata":{},"sourceType":"module"}