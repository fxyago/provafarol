{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { Vue } from '../vue';\nimport { PROP_TYPE_ARRAY_OBJECT, PROP_TYPE_STRING } from '../constants/props';\nimport { get } from '../utils/get';\nimport { stripTags } from '../utils/html';\nimport { isArray, isPlainObject, isUndefined } from '../utils/inspect';\nimport { keys } from '../utils/object';\nimport { makeProp, makePropsConfigurable } from '../utils/props';\nimport { warn } from '../utils/warn'; // --- Constants ---\n\nvar OPTIONS_OBJECT_DEPRECATED_MSG = 'Setting prop \"options\" to an object is deprecated. Use the array format instead.'; // --- Props ---\n\nexport var props = makePropsConfigurable({\n  disabledField: makeProp(PROP_TYPE_STRING, 'disabled'),\n  htmlField: makeProp(PROP_TYPE_STRING, 'html'),\n  options: makeProp(PROP_TYPE_ARRAY_OBJECT, []),\n  textField: makeProp(PROP_TYPE_STRING, 'text'),\n  valueField: makeProp(PROP_TYPE_STRING, 'value')\n}, 'formOptionControls'); // --- Mixin ---\n// @vue/component\n\nexport var formOptionsMixin = Vue.extend({\n  props: props,\n  computed: {\n    formOptions: function formOptions() {\n      return this.normalizeOptions(this.options);\n    }\n  },\n  methods: {\n    normalizeOption: function normalizeOption(option) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null; // When the option is an object, normalize it\n\n      if (isPlainObject(option)) {\n        var value = get(option, this.valueField);\n        var text = get(option, this.textField);\n        return {\n          value: isUndefined(value) ? key || text : value,\n          text: stripTags(String(isUndefined(text) ? key : text)),\n          html: get(option, this.htmlField),\n          disabled: Boolean(get(option, this.disabledField))\n        };\n      } // Otherwise create an `<option>` object from the given value\n\n\n      return {\n        value: key || option,\n        text: stripTags(String(option)),\n        disabled: false\n      };\n    },\n    normalizeOptions: function normalizeOptions(options) {\n      var _this = this; // Normalize the given options array\n\n\n      if (isArray(options)) {\n        return options.map(function (option) {\n          return _this.normalizeOption(option);\n        });\n      } else if (isPlainObject(options)) {\n        // Deprecate the object options format\n        warn(OPTIONS_OBJECT_DEPRECATED_MSG, this.$options.name); // Normalize a `options` object to an array of options\n\n        return keys(options).map(function (key) {\n          return _this.normalizeOption(options[key] || {}, key);\n        });\n      } // If not an array or object, return an empty array\n\n      /* istanbul ignore next */\n\n\n      return [];\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/mixins/form-options.js"],"names":["Vue","PROP_TYPE_ARRAY_OBJECT","PROP_TYPE_STRING","get","stripTags","isArray","isPlainObject","isUndefined","keys","makeProp","makePropsConfigurable","warn","OPTIONS_OBJECT_DEPRECATED_MSG","props","disabledField","htmlField","options","textField","valueField","formOptionsMixin","extend","computed","formOptions","normalizeOptions","methods","normalizeOption","option","key","arguments","length","undefined","value","text","String","html","disabled","Boolean","_this","map","$options","name"],"mappings":"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","sourcesContent":["import { Vue } from '../vue';\nimport { PROP_TYPE_ARRAY_OBJECT, PROP_TYPE_STRING } from '../constants/props';\nimport { get } from '../utils/get';\nimport { stripTags } from '../utils/html';\nimport { isArray, isPlainObject, isUndefined } from '../utils/inspect';\nimport { keys } from '../utils/object';\nimport { makeProp, makePropsConfigurable } from '../utils/props';\nimport { warn } from '../utils/warn'; // --- Constants ---\n\nvar OPTIONS_OBJECT_DEPRECATED_MSG = 'Setting prop \"options\" to an object is deprecated. Use the array format instead.'; // --- Props ---\n\nexport var props = makePropsConfigurable({\n  disabledField: makeProp(PROP_TYPE_STRING, 'disabled'),\n  htmlField: makeProp(PROP_TYPE_STRING, 'html'),\n  options: makeProp(PROP_TYPE_ARRAY_OBJECT, []),\n  textField: makeProp(PROP_TYPE_STRING, 'text'),\n  valueField: makeProp(PROP_TYPE_STRING, 'value')\n}, 'formOptionControls'); // --- Mixin ---\n// @vue/component\n\nexport var formOptionsMixin = Vue.extend({\n  props: props,\n  computed: {\n    formOptions: function formOptions() {\n      return this.normalizeOptions(this.options);\n    }\n  },\n  methods: {\n    normalizeOption: function normalizeOption(option) {\n      var key = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      // When the option is an object, normalize it\n      if (isPlainObject(option)) {\n        var value = get(option, this.valueField);\n        var text = get(option, this.textField);\n        return {\n          value: isUndefined(value) ? key || text : value,\n          text: stripTags(String(isUndefined(text) ? key : text)),\n          html: get(option, this.htmlField),\n          disabled: Boolean(get(option, this.disabledField))\n        };\n      } // Otherwise create an `<option>` object from the given value\n\n\n      return {\n        value: key || option,\n        text: stripTags(String(option)),\n        disabled: false\n      };\n    },\n    normalizeOptions: function normalizeOptions(options) {\n      var _this = this;\n\n      // Normalize the given options array\n      if (isArray(options)) {\n        return options.map(function (option) {\n          return _this.normalizeOption(option);\n        });\n      } else if (isPlainObject(options)) {\n        // Deprecate the object options format\n        warn(OPTIONS_OBJECT_DEPRECATED_MSG, this.$options.name); // Normalize a `options` object to an array of options\n\n        return keys(options).map(function (key) {\n          return _this.normalizeOption(options[key] || {}, key);\n        });\n      } // If not an array or object, return an empty array\n\n      /* istanbul ignore next */\n\n\n      return [];\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}