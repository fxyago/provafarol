{"ast":null,"code":"import { closest, getAttr, getById, matches, select } from '../../../utils/dom';\nimport { EVENT_FILTER } from './constants';\nvar TABLE_TAG_NAMES = ['TD', 'TH', 'TR']; // Returns `true` if we should ignore the click/double-click/keypress event\n// Avoids having the user need to use `@click.stop` on the form control\n\nexport var filterEvent = function filterEvent(event) {\n  // Exit early when we don't have a target element\n  if (!event || !event.target) {\n    /* istanbul ignore next */\n    return false;\n  }\n\n  var el = event.target; // Exit early when element is disabled or a table element\n\n  if (el.disabled || TABLE_TAG_NAMES.indexOf(el.tagName) !== -1) {\n    return false;\n  } // Ignore the click when it was inside a dropdown menu\n\n\n  if (closest('.dropdown-menu', el)) {\n    return true;\n  }\n\n  var label = el.tagName === 'LABEL' ? el : closest('label', el); // If the label's form control is not disabled then we don't propagate event\n  // Modern browsers have `label.control` that references the associated input, but IE 11\n  // does not have this property on the label element, so we resort to DOM lookups\n\n  if (label) {\n    var labelFor = getAttr(label, 'for');\n    var input = labelFor ? getById(labelFor) : select('input, select, textarea', label);\n\n    if (input && !input.disabled) {\n      return true;\n    }\n  } // Otherwise check if the event target matches one of the selectors in the\n  // event filter (i.e. anchors, non disabled inputs, etc.)\n  // Return `true` if we should ignore the event\n\n\n  return matches(el, EVENT_FILTER);\n};","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/components/table/helpers/filter-event.js"],"names":["closest","getAttr","getById","matches","select","EVENT_FILTER","TABLE_TAG_NAMES","filterEvent","event","target","el","disabled","indexOf","tagName","label","labelFor","input"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,OAAlB,EAA2BC,OAA3B,EAAoCC,OAApC,EAA6CC,MAA7C,QAA2D,oBAA3D;AACA,SAASC,YAAT,QAA6B,aAA7B;AACA,IAAIC,eAAe,GAAG,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,CAAtB,C,CAA0C;AAC1C;;AAEA,OAAO,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBC,KAArB,EAA4B;AACnD;AACA,MAAI,CAACA,KAAD,IAAU,CAACA,KAAK,CAACC,MAArB,EAA6B;AAC3B;AACA,WAAO,KAAP;AACD;;AAED,MAAIC,EAAE,GAAGF,KAAK,CAACC,MAAf,CAPmD,CAO5B;;AAEvB,MAAIC,EAAE,CAACC,QAAH,IAAeL,eAAe,CAACM,OAAhB,CAAwBF,EAAE,CAACG,OAA3B,MAAwC,CAAC,CAA5D,EAA+D;AAC7D,WAAO,KAAP;AACD,GAXkD,CAWjD;;;AAGF,MAAIb,OAAO,CAAC,gBAAD,EAAmBU,EAAnB,CAAX,EAAmC;AACjC,WAAO,IAAP;AACD;;AAED,MAAII,KAAK,GAAGJ,EAAE,CAACG,OAAH,KAAe,OAAf,GAAyBH,EAAzB,GAA8BV,OAAO,CAAC,OAAD,EAAUU,EAAV,CAAjD,CAlBmD,CAkBa;AAChE;AACA;;AAEA,MAAII,KAAJ,EAAW;AACT,QAAIC,QAAQ,GAAGd,OAAO,CAACa,KAAD,EAAQ,KAAR,CAAtB;AACA,QAAIE,KAAK,GAAGD,QAAQ,GAAGb,OAAO,CAACa,QAAD,CAAV,GAAuBX,MAAM,CAAC,yBAAD,EAA4BU,KAA5B,CAAjD;;AAEA,QAAIE,KAAK,IAAI,CAACA,KAAK,CAACL,QAApB,EAA8B;AAC5B,aAAO,IAAP;AACD;AACF,GA7BkD,CA6BjD;AACF;AACA;;;AAGA,SAAOR,OAAO,CAACO,EAAD,EAAKL,YAAL,CAAd;AACD,CAnCM","sourcesContent":["import { closest, getAttr, getById, matches, select } from '../../../utils/dom';\nimport { EVENT_FILTER } from './constants';\nvar TABLE_TAG_NAMES = ['TD', 'TH', 'TR']; // Returns `true` if we should ignore the click/double-click/keypress event\n// Avoids having the user need to use `@click.stop` on the form control\n\nexport var filterEvent = function filterEvent(event) {\n  // Exit early when we don't have a target element\n  if (!event || !event.target) {\n    /* istanbul ignore next */\n    return false;\n  }\n\n  var el = event.target; // Exit early when element is disabled or a table element\n\n  if (el.disabled || TABLE_TAG_NAMES.indexOf(el.tagName) !== -1) {\n    return false;\n  } // Ignore the click when it was inside a dropdown menu\n\n\n  if (closest('.dropdown-menu', el)) {\n    return true;\n  }\n\n  var label = el.tagName === 'LABEL' ? el : closest('label', el); // If the label's form control is not disabled then we don't propagate event\n  // Modern browsers have `label.control` that references the associated input, but IE 11\n  // does not have this property on the label element, so we resort to DOM lookups\n\n  if (label) {\n    var labelFor = getAttr(label, 'for');\n    var input = labelFor ? getById(labelFor) : select('input, select, textarea', label);\n\n    if (input && !input.disabled) {\n      return true;\n    }\n  } // Otherwise check if the event target matches one of the selectors in the\n  // event filter (i.e. anchors, non disabled inputs, etc.)\n  // Return `true` if we should ignore the event\n\n\n  return matches(el, EVENT_FILTER);\n};"]},"metadata":{},"sourceType":"module"}