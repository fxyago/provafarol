{"ast":null,"code":"import \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { isFunction } from './inspect'; // --- Static ---\n\nexport var from = function from() {\n  return Array.from.apply(Array, arguments);\n}; // --- Instance ---\n\nexport var arrayIncludes = function arrayIncludes(array, value) {\n  return array.indexOf(value) !== -1;\n};\nexport var concat = function concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return Array.prototype.concat.apply([], args);\n}; // --- Utilities ---\n\nexport var createArray = function createArray(length, fillFn) {\n  var mapFn = isFunction(fillFn) ? fillFn : function () {\n    return fillFn;\n  };\n  return Array.apply(null, {\n    length: length\n  }).map(mapFn);\n};\nexport var flatten = function flatten(array) {\n  return array.reduce(function (result, item) {\n    return concat(result, item);\n  }, []);\n};\nexport var flattenDeep = function flattenDeep(array) {\n  return array.reduce(function (result, item) {\n    return concat(result, Array.isArray(item) ? flattenDeep(item) : item);\n  }, []);\n};","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/utils/array.js"],"names":["isFunction","from","Array","apply","arguments","arrayIncludes","array","value","indexOf","concat","_len","length","args","_key","prototype","createArray","fillFn","mapFn","map","flatten","reduce","result","item","flattenDeep","isArray"],"mappings":";;;;;AAAA,SAASA,UAAT,QAA2B,WAA3B,C,CAAwC;;AAExC,OAAO,IAAIC,IAAI,GAAG,SAASA,IAAT,GAAgB;AAChC,SAAOC,KAAK,CAACD,IAAN,CAAWE,KAAX,CAAiBD,KAAjB,EAAwBE,SAAxB,CAAP;AACD,CAFM,C,CAEJ;;AAEH,OAAO,IAAIC,aAAa,GAAG,SAASA,aAAT,CAAuBC,KAAvB,EAA8BC,KAA9B,EAAqC;AAC9D,SAAOD,KAAK,CAACE,OAAN,CAAcD,KAAd,MAAyB,CAAC,CAAjC;AACD,CAFM;AAGP,OAAO,IAAIE,MAAM,GAAG,SAASA,MAAT,GAAkB;AACpC,OAAK,IAAIC,IAAI,GAAGN,SAAS,CAACO,MAArB,EAA6BC,IAAI,GAAG,IAAIV,KAAJ,CAAUQ,IAAV,CAApC,EAAqDG,IAAI,GAAG,CAAjE,EAAoEA,IAAI,GAAGH,IAA3E,EAAiFG,IAAI,EAArF,EAAyF;AACvFD,IAAAA,IAAI,CAACC,IAAD,CAAJ,GAAaT,SAAS,CAACS,IAAD,CAAtB;AACD;;AAED,SAAOX,KAAK,CAACY,SAAN,CAAgBL,MAAhB,CAAuBN,KAAvB,CAA6B,EAA7B,EAAiCS,IAAjC,CAAP;AACD,CANM,C,CAMJ;;AAEH,OAAO,IAAIG,WAAW,GAAG,SAASA,WAAT,CAAqBJ,MAArB,EAA6BK,MAA7B,EAAqC;AAC5D,MAAIC,KAAK,GAAGjB,UAAU,CAACgB,MAAD,CAAV,GAAqBA,MAArB,GAA8B,YAAY;AACpD,WAAOA,MAAP;AACD,GAFD;AAGA,SAAOd,KAAK,CAACC,KAAN,CAAY,IAAZ,EAAkB;AACvBQ,IAAAA,MAAM,EAAEA;AADe,GAAlB,EAEJO,GAFI,CAEAD,KAFA,CAAP;AAGD,CAPM;AAQP,OAAO,IAAIE,OAAO,GAAG,SAASA,OAAT,CAAiBb,KAAjB,EAAwB;AAC3C,SAAOA,KAAK,CAACc,MAAN,CAAa,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AAC1C,WAAOb,MAAM,CAACY,MAAD,EAASC,IAAT,CAAb;AACD,GAFM,EAEJ,EAFI,CAAP;AAGD,CAJM;AAKP,OAAO,IAAIC,WAAW,GAAG,SAASA,WAAT,CAAqBjB,KAArB,EAA4B;AACnD,SAAOA,KAAK,CAACc,MAAN,CAAa,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AAC1C,WAAOb,MAAM,CAACY,MAAD,EAASnB,KAAK,CAACsB,OAAN,CAAcF,IAAd,IAAsBC,WAAW,CAACD,IAAD,CAAjC,GAA0CA,IAAnD,CAAb;AACD,GAFM,EAEJ,EAFI,CAAP;AAGD,CAJM","sourcesContent":["import { isFunction } from './inspect'; // --- Static ---\n\nexport var from = function from() {\n  return Array.from.apply(Array, arguments);\n}; // --- Instance ---\n\nexport var arrayIncludes = function arrayIncludes(array, value) {\n  return array.indexOf(value) !== -1;\n};\nexport var concat = function concat() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  return Array.prototype.concat.apply([], args);\n}; // --- Utilities ---\n\nexport var createArray = function createArray(length, fillFn) {\n  var mapFn = isFunction(fillFn) ? fillFn : function () {\n    return fillFn;\n  };\n  return Array.apply(null, {\n    length: length\n  }).map(mapFn);\n};\nexport var flatten = function flatten(array) {\n  return array.reduce(function (result, item) {\n    return concat(result, item);\n  }, []);\n};\nexport var flattenDeep = function flattenDeep(array) {\n  return array.reduce(function (result, item) {\n    return concat(result, Array.isArray(item) ? flattenDeep(item) : item);\n  }, []);\n};"]},"metadata":{},"sourceType":"module"}