{"ast":null,"code":"import { NAME_MODAL } from '../../constants/components';\nimport { EVENT_NAME_SHOW, EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { getAttr, hasAttr, isDisabled, matches, select, setAttr } from '../../utils/dom';\nimport { getRootActionEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { keys } from '../../utils/object'; // Emitted show event for modal\n\nvar ROOT_ACTION_EVENT_NAME_SHOW = getRootActionEventName(NAME_MODAL, EVENT_NAME_SHOW); // Prop name we use to store info on root element\n\nvar PROPERTY = '__bv_modal_directive__';\n\nvar getTarget = function getTarget(_ref) {\n  var _ref$modifiers = _ref.modifiers,\n      modifiers = _ref$modifiers === void 0 ? {} : _ref$modifiers,\n      arg = _ref.arg,\n      value = _ref.value; // Try value, then arg, otherwise pick last modifier\n\n  return isString(value) ? value : isString(arg) ? arg : keys(modifiers).reverse()[0];\n};\n\nvar getTriggerElement = function getTriggerElement(el) {\n  // If root element is a dropdown-item or nav-item, we\n  // need to target the inner link or button instead\n  return el && matches(el, '.dropdown-menu > li, li.nav-item') ? select('a, button', el) || el : el;\n};\n\nvar setRole = function setRole(trigger) {\n  // Ensure accessibility on non button elements\n  if (trigger && trigger.tagName !== 'BUTTON') {\n    // Only set a role if the trigger element doesn't have one\n    if (!hasAttr(trigger, 'role')) {\n      setAttr(trigger, 'role', 'button');\n    } // Add a tabindex is not a button or link, and tabindex is not provided\n\n\n    if (trigger.tagName !== 'A' && !hasAttr(trigger, 'tabindex')) {\n      setAttr(trigger, 'tabindex', '0');\n    }\n  }\n};\n\nvar bind = function bind(el, binding, vnode) {\n  var target = getTarget(binding);\n  var trigger = getTriggerElement(el);\n\n  if (target && trigger) {\n    var handler = function handler(event) {\n      // `currentTarget` is the element with the listener on it\n      var currentTarget = event.currentTarget;\n\n      if (!isDisabled(currentTarget)) {\n        var type = event.type;\n        var key = event.keyCode; // Open modal only if trigger is not disabled\n\n        if (type === 'click' || type === 'keydown' && (key === CODE_ENTER || key === CODE_SPACE)) {\n          vnode.context.$root.$emit(ROOT_ACTION_EVENT_NAME_SHOW, target, currentTarget);\n        }\n      }\n    };\n\n    el[PROPERTY] = {\n      handler: handler,\n      target: target,\n      trigger: trigger\n    }; // If element is not a button, we add `role=\"button\"` for accessibility\n\n    setRole(trigger); // Listen for click events\n\n    eventOn(trigger, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n    if (trigger.tagName !== 'BUTTON' && getAttr(trigger, 'role') === 'button') {\n      // If trigger isn't a button but has role button,\n      // we also listen for `keydown.space` && `keydown.enter`\n      eventOn(trigger, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar unbind = function unbind(el) {\n  var oldProp = el[PROPERTY] || {};\n  var trigger = oldProp.trigger;\n  var handler = oldProp.handler;\n\n  if (trigger && handler) {\n    eventOff(trigger, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(trigger, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n\n  delete el[PROPERTY];\n};\n\nvar componentUpdated = function componentUpdated(el, binding, vnode) {\n  var oldProp = el[PROPERTY] || {};\n  var target = getTarget(binding);\n  var trigger = getTriggerElement(el);\n\n  if (target !== oldProp.target || trigger !== oldProp.trigger) {\n    // We bind and rebind if the target or trigger changes\n    unbind(el, binding, vnode);\n    bind(el, binding, vnode);\n  } // If trigger element is not a button, ensure `role=\"button\"`\n  // is still set for accessibility\n\n\n  setRole(trigger);\n};\n\nvar updated = function updated() {};\n/*\n * Export our directive\n */\n\n\nexport var VBModal = {\n  inserted: componentUpdated,\n  updated: updated,\n  componentUpdated: componentUpdated,\n  unbind: unbind\n};","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/directives/modal/modal.js"],"names":["NAME_MODAL","EVENT_NAME_SHOW","EVENT_OPTIONS_PASSIVE","CODE_ENTER","CODE_SPACE","getAttr","hasAttr","isDisabled","matches","select","setAttr","getRootActionEventName","eventOn","eventOff","isString","keys","ROOT_ACTION_EVENT_NAME_SHOW","PROPERTY","getTarget","_ref","_ref$modifiers","modifiers","arg","value","reverse","getTriggerElement","el","setRole","trigger","tagName","bind","binding","vnode","target","handler","event","currentTarget","type","key","keyCode","context","$root","$emit","unbind","oldProp","componentUpdated","updated","VBModal","inserted"],"mappings":"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","sourcesContent":["import { NAME_MODAL } from '../../constants/components';\nimport { EVENT_NAME_SHOW, EVENT_OPTIONS_PASSIVE } from '../../constants/events';\nimport { CODE_ENTER, CODE_SPACE } from '../../constants/key-codes';\nimport { getAttr, hasAttr, isDisabled, matches, select, setAttr } from '../../utils/dom';\nimport { getRootActionEventName, eventOn, eventOff } from '../../utils/events';\nimport { isString } from '../../utils/inspect';\nimport { keys } from '../../utils/object'; // Emitted show event for modal\n\nvar ROOT_ACTION_EVENT_NAME_SHOW = getRootActionEventName(NAME_MODAL, EVENT_NAME_SHOW); // Prop name we use to store info on root element\n\nvar PROPERTY = '__bv_modal_directive__';\n\nvar getTarget = function getTarget(_ref) {\n  var _ref$modifiers = _ref.modifiers,\n      modifiers = _ref$modifiers === void 0 ? {} : _ref$modifiers,\n      arg = _ref.arg,\n      value = _ref.value;\n  // Try value, then arg, otherwise pick last modifier\n  return isString(value) ? value : isString(arg) ? arg : keys(modifiers).reverse()[0];\n};\n\nvar getTriggerElement = function getTriggerElement(el) {\n  // If root element is a dropdown-item or nav-item, we\n  // need to target the inner link or button instead\n  return el && matches(el, '.dropdown-menu > li, li.nav-item') ? select('a, button', el) || el : el;\n};\n\nvar setRole = function setRole(trigger) {\n  // Ensure accessibility on non button elements\n  if (trigger && trigger.tagName !== 'BUTTON') {\n    // Only set a role if the trigger element doesn't have one\n    if (!hasAttr(trigger, 'role')) {\n      setAttr(trigger, 'role', 'button');\n    } // Add a tabindex is not a button or link, and tabindex is not provided\n\n\n    if (trigger.tagName !== 'A' && !hasAttr(trigger, 'tabindex')) {\n      setAttr(trigger, 'tabindex', '0');\n    }\n  }\n};\n\nvar bind = function bind(el, binding, vnode) {\n  var target = getTarget(binding);\n  var trigger = getTriggerElement(el);\n\n  if (target && trigger) {\n    var handler = function handler(event) {\n      // `currentTarget` is the element with the listener on it\n      var currentTarget = event.currentTarget;\n\n      if (!isDisabled(currentTarget)) {\n        var type = event.type;\n        var key = event.keyCode; // Open modal only if trigger is not disabled\n\n        if (type === 'click' || type === 'keydown' && (key === CODE_ENTER || key === CODE_SPACE)) {\n          vnode.context.$root.$emit(ROOT_ACTION_EVENT_NAME_SHOW, target, currentTarget);\n        }\n      }\n    };\n\n    el[PROPERTY] = {\n      handler: handler,\n      target: target,\n      trigger: trigger\n    }; // If element is not a button, we add `role=\"button\"` for accessibility\n\n    setRole(trigger); // Listen for click events\n\n    eventOn(trigger, 'click', handler, EVENT_OPTIONS_PASSIVE);\n\n    if (trigger.tagName !== 'BUTTON' && getAttr(trigger, 'role') === 'button') {\n      // If trigger isn't a button but has role button,\n      // we also listen for `keydown.space` && `keydown.enter`\n      eventOn(trigger, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    }\n  }\n};\n\nvar unbind = function unbind(el) {\n  var oldProp = el[PROPERTY] || {};\n  var trigger = oldProp.trigger;\n  var handler = oldProp.handler;\n\n  if (trigger && handler) {\n    eventOff(trigger, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(trigger, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'click', handler, EVENT_OPTIONS_PASSIVE);\n    eventOff(el, 'keydown', handler, EVENT_OPTIONS_PASSIVE);\n  }\n\n  delete el[PROPERTY];\n};\n\nvar componentUpdated = function componentUpdated(el, binding, vnode) {\n  var oldProp = el[PROPERTY] || {};\n  var target = getTarget(binding);\n  var trigger = getTriggerElement(el);\n\n  if (target !== oldProp.target || trigger !== oldProp.trigger) {\n    // We bind and rebind if the target or trigger changes\n    unbind(el, binding, vnode);\n    bind(el, binding, vnode);\n  } // If trigger element is not a button, ensure `role=\"button\"`\n  // is still set for accessibility\n\n\n  setRole(trigger);\n};\n\nvar updated = function updated() {};\n/*\n * Export our directive\n */\n\n\nexport var VBModal = {\n  inserted: componentUpdated,\n  updated: updated,\n  componentUpdated: componentUpdated,\n  unbind: unbind\n};"]},"metadata":{},"sourceType":"module"}