{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.sort.js\";\nimport { isDate, isObject, isUndefinedOrNull } from './inspect';\nimport { keys } from './object';\nimport { toString } from './string'; // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Strings are returned as-is\n// Numbers get converted to string\n// `null` and `undefined` values are filtered out\n// Dates are converted to their native string format\n\nexport var stringifyObjectValues = function stringifyObjectValues(value) {\n  if (isUndefinedOrNull(value)) {\n    return '';\n  } // Arrays are also object, and keys just returns the array indexes\n  // Date objects we convert to strings\n\n\n  if (isObject(value) && !isDate(value)) {\n    return keys(value).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\n    .map(function (k) {\n      return stringifyObjectValues(value[k]);\n    }).filter(function (v) {\n      return !!v;\n    }) // Ignore empty strings\n    .join(' ');\n  }\n\n  return toString(value);\n};","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/utils/stringify-object-values.js"],"names":["isDate","isObject","isUndefinedOrNull","keys","toString","stringifyObjectValues","value","sort","map","k","filter","v","join"],"mappings":";;;;;AAAA,SAASA,MAAT,EAAiBC,QAAjB,EAA2BC,iBAA3B,QAAoD,WAApD;AACA,SAASC,IAAT,QAAqB,UAArB;AACA,SAASC,QAAT,QAAyB,UAAzB,C,CAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,IAAIC,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,KAA/B,EAAsC;AACvE,MAAIJ,iBAAiB,CAACI,KAAD,CAArB,EAA8B;AAC5B,WAAO,EAAP;AACD,GAHsE,CAGrE;AACF;;;AAGA,MAAIL,QAAQ,CAACK,KAAD,CAAR,IAAmB,CAACN,MAAM,CAACM,KAAD,CAA9B,EAAuC;AACrC,WAAOH,IAAI,CAACG,KAAD,CAAJ,CAAYC,IAAZ,GAAmB;AAAnB,KACNC,GADM,CACF,UAAUC,CAAV,EAAa;AAChB,aAAOJ,qBAAqB,CAACC,KAAK,CAACG,CAAD,CAAN,CAA5B;AACD,KAHM,EAGJC,MAHI,CAGG,UAAUC,CAAV,EAAa;AACrB,aAAO,CAAC,CAACA,CAAT;AACD,KALM,EAKJ;AALI,KAMNC,IANM,CAMD,GANC,CAAP;AAOD;;AAED,SAAOR,QAAQ,CAACE,KAAD,CAAf;AACD,CAlBM","sourcesContent":["import { isDate, isObject, isUndefinedOrNull } from './inspect';\nimport { keys } from './object';\nimport { toString } from './string'; // Recursively stringifies the values of an object, space separated, in an\n// SSR safe deterministic way (keys are sorted before stringification)\n//\n//   ex:\n//     { b: 3, c: { z: 'zzz', d: null, e: 2 }, d: [10, 12, 11], a: 'one' }\n//   becomes\n//     'one 3 2 zzz 10 12 11'\n//\n// Strings are returned as-is\n// Numbers get converted to string\n// `null` and `undefined` values are filtered out\n// Dates are converted to their native string format\n\nexport var stringifyObjectValues = function stringifyObjectValues(value) {\n  if (isUndefinedOrNull(value)) {\n    return '';\n  } // Arrays are also object, and keys just returns the array indexes\n  // Date objects we convert to strings\n\n\n  if (isObject(value) && !isDate(value)) {\n    return keys(value).sort() // Sort to prevent SSR issues on pre-rendered sorted tables\n    .map(function (k) {\n      return stringifyObjectValues(value[k]);\n    }).filter(function (v) {\n      return !!v;\n    }) // Ignore empty strings\n    .join(' ');\n  }\n\n  return toString(value);\n};"]},"metadata":{},"sourceType":"module"}