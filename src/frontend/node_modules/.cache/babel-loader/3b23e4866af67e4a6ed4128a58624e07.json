{"ast":null,"code":"function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { Vue } from '../../../vue';\nimport { MODEL_EVENT_NAME_PREFIX } from '../../../constants/events';\nimport { PROP_TYPE_BOOLEAN } from '../../../constants/props';\nimport { SLOT_NAME_TABLE_BUSY } from '../../../constants/slots';\nimport { stopEvent } from '../../../utils/events';\nimport { isFunction } from '../../../utils/inspect';\nimport { makeProp } from '../../../utils/props';\nimport { BTr } from '../tr';\nimport { BTd } from '../td'; // --- Constants ---\n\nvar MODEL_PROP_NAME_BUSY = 'busy';\nvar MODEL_EVENT_NAME_BUSY = MODEL_EVENT_NAME_PREFIX + MODEL_PROP_NAME_BUSY; // --- Props ---\n\nexport var props = _defineProperty({}, MODEL_PROP_NAME_BUSY, makeProp(PROP_TYPE_BOOLEAN, false)); // --- Mixin ---\n// @vue/component\n\nexport var busyMixin = Vue.extend({\n  props: props,\n  data: function data() {\n    return {\n      localBusy: false\n    };\n  },\n  computed: {\n    computedBusy: function computedBusy() {\n      return this[MODEL_PROP_NAME_BUSY] || this.localBusy;\n    }\n  },\n  watch: {\n    localBusy: function localBusy(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.$emit(MODEL_EVENT_NAME_BUSY, newValue);\n      }\n    }\n  },\n  methods: {\n    // Event handler helper\n    stopIfBusy: function stopIfBusy(event) {\n      // If table is busy (via provider) then don't propagate\n      if (this.computedBusy) {\n        stopEvent(event);\n        return true;\n      }\n\n      return false;\n    },\n    // Render the busy indicator or return `null` if not busy\n    renderBusy: function renderBusy() {\n      var tbodyTrClass = this.tbodyTrClass,\n          tbodyTrAttr = this.tbodyTrAttr;\n      var h = this.$createElement; // Return a busy indicator row, or `null` if not busy\n\n      if (this.computedBusy && this.hasNormalizedSlot(SLOT_NAME_TABLE_BUSY)) {\n        return h(BTr, {\n          staticClass: 'b-table-busy-slot',\n          class: [isFunction(tbodyTrClass) ?\n          /* istanbul ignore next */\n          tbodyTrClass(null, SLOT_NAME_TABLE_BUSY) : tbodyTrClass],\n          attrs: isFunction(tbodyTrAttr) ?\n          /* istanbul ignore next */\n          tbodyTrAttr(null, SLOT_NAME_TABLE_BUSY) : tbodyTrAttr,\n          key: 'table-busy-slot'\n        }, [h(BTd, {\n          props: {\n            colspan: this.computedFields.length || null\n          }\n        }, [this.normalizeSlot(SLOT_NAME_TABLE_BUSY)])]);\n      } // We return `null` here so that we can determine if we need to\n      // render the table items rows or not\n\n\n      return null;\n    }\n  }\n});","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/components/table/helpers/mixin-busy.js"],"names":["_defineProperty","obj","key","value","Object","defineProperty","enumerable","configurable","writable","Vue","MODEL_EVENT_NAME_PREFIX","PROP_TYPE_BOOLEAN","SLOT_NAME_TABLE_BUSY","stopEvent","isFunction","makeProp","BTr","BTd","MODEL_PROP_NAME_BUSY","MODEL_EVENT_NAME_BUSY","props","busyMixin","extend","data","localBusy","computed","computedBusy","watch","newValue","oldValue","$emit","methods","stopIfBusy","event","renderBusy","tbodyTrClass","tbodyTrAttr","h","$createElement","hasNormalizedSlot","staticClass","class","attrs","colspan","computedFields","length","normalizeSlot"],"mappings":"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","sourcesContent":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { Vue } from '../../../vue';\nimport { MODEL_EVENT_NAME_PREFIX } from '../../../constants/events';\nimport { PROP_TYPE_BOOLEAN } from '../../../constants/props';\nimport { SLOT_NAME_TABLE_BUSY } from '../../../constants/slots';\nimport { stopEvent } from '../../../utils/events';\nimport { isFunction } from '../../../utils/inspect';\nimport { makeProp } from '../../../utils/props';\nimport { BTr } from '../tr';\nimport { BTd } from '../td'; // --- Constants ---\n\nvar MODEL_PROP_NAME_BUSY = 'busy';\nvar MODEL_EVENT_NAME_BUSY = MODEL_EVENT_NAME_PREFIX + MODEL_PROP_NAME_BUSY; // --- Props ---\n\nexport var props = _defineProperty({}, MODEL_PROP_NAME_BUSY, makeProp(PROP_TYPE_BOOLEAN, false)); // --- Mixin ---\n// @vue/component\n\nexport var busyMixin = Vue.extend({\n  props: props,\n  data: function data() {\n    return {\n      localBusy: false\n    };\n  },\n  computed: {\n    computedBusy: function computedBusy() {\n      return this[MODEL_PROP_NAME_BUSY] || this.localBusy;\n    }\n  },\n  watch: {\n    localBusy: function localBusy(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        this.$emit(MODEL_EVENT_NAME_BUSY, newValue);\n      }\n    }\n  },\n  methods: {\n    // Event handler helper\n    stopIfBusy: function stopIfBusy(event) {\n      // If table is busy (via provider) then don't propagate\n      if (this.computedBusy) {\n        stopEvent(event);\n        return true;\n      }\n\n      return false;\n    },\n    // Render the busy indicator or return `null` if not busy\n    renderBusy: function renderBusy() {\n      var tbodyTrClass = this.tbodyTrClass,\n          tbodyTrAttr = this.tbodyTrAttr;\n      var h = this.$createElement; // Return a busy indicator row, or `null` if not busy\n\n      if (this.computedBusy && this.hasNormalizedSlot(SLOT_NAME_TABLE_BUSY)) {\n        return h(BTr, {\n          staticClass: 'b-table-busy-slot',\n          class: [isFunction(tbodyTrClass) ?\n          /* istanbul ignore next */\n          tbodyTrClass(null, SLOT_NAME_TABLE_BUSY) : tbodyTrClass],\n          attrs: isFunction(tbodyTrAttr) ?\n          /* istanbul ignore next */\n          tbodyTrAttr(null, SLOT_NAME_TABLE_BUSY) : tbodyTrAttr,\n          key: 'table-busy-slot'\n        }, [h(BTd, {\n          props: {\n            colspan: this.computedFields.length || null\n          }\n        }, [this.normalizeSlot(SLOT_NAME_TABLE_BUSY)])]);\n      } // We return `null` here so that we can determine if we need to\n      // render the table items rows or not\n\n\n      return null;\n    }\n  }\n});"]},"metadata":{},"sourceType":"module"}