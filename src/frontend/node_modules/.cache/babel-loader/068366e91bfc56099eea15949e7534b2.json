{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.symbol.description.js\";\nimport \"core-js/modules/es.symbol.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptor.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.get-own-property-descriptors.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.trim.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.string.split.js\";\n\nvar _watch;\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n} // Tagged input form control\n// Based loosely on https://adamwathan.me/renderless-components-in-vuejs/\n\n\nimport { Vue } from '../../vue';\nimport { NAME_FORM_TAGS } from '../../constants/components';\nimport { EVENT_NAME_TAG_STATE, EVENT_OPTIONS_PASSIVE, HOOK_EVENT_NAME_BEFORE_DESTROY } from '../../constants/events';\nimport { CODE_BACKSPACE, CODE_DELETE, CODE_ENTER } from '../../constants/key-codes';\nimport { PROP_TYPE_ARRAY, PROP_TYPE_ARRAY_OBJECT_STRING, PROP_TYPE_ARRAY_STRING, PROP_TYPE_BOOLEAN, PROP_TYPE_FUNCTION, PROP_TYPE_NUMBER, PROP_TYPE_OBJECT, PROP_TYPE_STRING } from '../../constants/props';\nimport { RX_SPACES } from '../../constants/regex';\nimport { SLOT_NAME_DEFAULT, SLOT_NAME_ADD_BUTTON_TEXT } from '../../constants/slots';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { cssEscape } from '../../utils/css-escape';\nimport { attemptBlur, attemptFocus, closest, isActiveElement, matches, requestAF, select } from '../../utils/dom';\nimport { eventOn, eventOff, stopEvent } from '../../utils/events';\nimport { identity } from '../../utils/identity';\nimport { isEvent, isNumber, isString } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { makeModelMixin } from '../../utils/model';\nimport { pick, sortKeys } from '../../utils/object';\nimport { hasPropFunction, makeProp, makePropsConfigurable } from '../../utils/props';\nimport { escapeRegExp, toString, trim, trimLeft } from '../../utils/string';\nimport { formControlMixin, props as formControlProps } from '../../mixins/form-control';\nimport { formSizeMixin, props as formSizeProps } from '../../mixins/form-size';\nimport { formStateMixin, props as formStateProps } from '../../mixins/form-state';\nimport { idMixin, props as idProps } from '../../mixins/id';\nimport { normalizeSlotMixin } from '../../mixins/normalize-slot';\nimport { BButton } from '../button/button';\nimport { BFormInvalidFeedback } from '../form/form-invalid-feedback';\nimport { BFormText } from '../form/form-text';\nimport { BFormTag } from './form-tag'; // --- Constants ---\n\nvar _makeModelMixin = makeModelMixin('value', {\n  type: PROP_TYPE_ARRAY,\n  defaultValue: []\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event; // Supported input types (for built in input)\n\n\nvar TYPES = ['text', 'email', 'tel', 'url', 'number']; // Default ignore input focus selector\n\nvar DEFAULT_INPUT_FOCUS_SELECTOR = ['.b-form-tag', 'button', 'input', 'select'].join(' '); // --- Helper methods ---\n// Escape special chars in string and replace\n// contiguous spaces with a whitespace match\n\nvar escapeRegExpChars = function escapeRegExpChars(str) {\n  return escapeRegExp(str).replace(RX_SPACES, '\\\\s');\n}; // Remove leading/trailing spaces from array of tags and remove duplicates\n\n\nvar cleanTags = function cleanTags(tags) {\n  return concat(tags).map(function (tag) {\n    return trim(toString(tag));\n  }).filter(function (tag, index, arr) {\n    return tag.length > 0 && arr.indexOf(tag) === index;\n  });\n}; // Processes an input/change event, normalizing string or event argument\n\n\nvar processEventValue = function processEventValue(event) {\n  return isString(event) ? event : isEvent(event) ? event.target.value || '' : '';\n}; // Returns a fresh empty `tagsState` object\n\n\nvar cleanTagsState = function cleanTagsState() {\n  return {\n    all: [],\n    valid: [],\n    invalid: [],\n    duplicate: []\n  };\n}; // --- Props ---\n\n\nvar props = makePropsConfigurable(sortKeys(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, idProps), modelProps), formControlProps), formSizeProps), formStateProps), {}, {\n  addButtonText: makeProp(PROP_TYPE_STRING, 'Add'),\n  addButtonVariant: makeProp(PROP_TYPE_STRING, 'outline-secondary'),\n  // Enable change event triggering tag addition\n  // Handy if using <select> as the input\n  addOnChange: makeProp(PROP_TYPE_BOOLEAN, false),\n  duplicateTagText: makeProp(PROP_TYPE_STRING, 'Duplicate tag(s)'),\n  // Disable the input focus behavior when clicking\n  // on element matching the selector (or selectors)\n  ignoreInputFocusSelector: makeProp(PROP_TYPE_ARRAY_STRING, DEFAULT_INPUT_FOCUS_SELECTOR),\n  // Additional attributes to add to the input element\n  inputAttrs: makeProp(PROP_TYPE_OBJECT, {}),\n  inputClass: makeProp(PROP_TYPE_ARRAY_OBJECT_STRING),\n  inputId: makeProp(PROP_TYPE_STRING),\n  inputType: makeProp(PROP_TYPE_STRING, 'text', function (value) {\n    return arrayIncludes(TYPES, value);\n  }),\n  invalidTagText: makeProp(PROP_TYPE_STRING, 'Invalid tag(s)'),\n  limit: makeProp(PROP_TYPE_NUMBER),\n  limitTagsText: makeProp(PROP_TYPE_STRING, 'Tag limit reached'),\n  // Disable ENTER key from triggering tag addition\n  noAddOnEnter: makeProp(PROP_TYPE_BOOLEAN, false),\n  // Disable the focus ring on the root element\n  noOuterFocus: makeProp(PROP_TYPE_BOOLEAN, false),\n  noTagRemove: makeProp(PROP_TYPE_BOOLEAN, false),\n  placeholder: makeProp(PROP_TYPE_STRING, 'Add tag...'),\n  // Enable deleting last tag in list when CODE_BACKSPACE is\n  // pressed and input is empty\n  removeOnDelete: makeProp(PROP_TYPE_BOOLEAN, false),\n  // Character (or characters) that trigger adding tags\n  separator: makeProp(PROP_TYPE_ARRAY_STRING),\n  tagClass: makeProp(PROP_TYPE_ARRAY_OBJECT_STRING),\n  tagPills: makeProp(PROP_TYPE_BOOLEAN, false),\n  tagRemoveLabel: makeProp(PROP_TYPE_STRING, 'Remove tag'),\n  tagRemovedLabel: makeProp(PROP_TYPE_STRING, 'Tag removed'),\n  tagValidator: makeProp(PROP_TYPE_FUNCTION),\n  tagVariant: makeProp(PROP_TYPE_STRING, 'secondary')\n})), NAME_FORM_TAGS); // --- Main component ---\n// @vue/component\n\nexport var BFormTags = /*#__PURE__*/Vue.extend({\n  name: NAME_FORM_TAGS,\n  mixins: [idMixin, modelMixin, formControlMixin, formSizeMixin, formStateMixin, normalizeSlotMixin],\n  props: props,\n  data: function data() {\n    return {\n      hasFocus: false,\n      newTag: '',\n      tags: [],\n      // Tags that were removed\n      removedTags: [],\n      // Populated when tags are parsed\n      tagsState: cleanTagsState()\n    };\n  },\n  computed: {\n    computedInputId: function computedInputId() {\n      return this.inputId || this.safeId('__input__');\n    },\n    computedInputType: function computedInputType() {\n      // We only allow certain types\n      return arrayIncludes(TYPES, this.inputType) ? this.inputType : 'text';\n    },\n    computedInputAttrs: function computedInputAttrs() {\n      var disabled = this.disabled,\n          form = this.form;\n      return _objectSpread(_objectSpread({}, this.inputAttrs), {}, {\n        // Must have attributes\n        id: this.computedInputId,\n        value: this.newTag,\n        disabled: disabled,\n        form: form\n      });\n    },\n    computedInputHandlers: function computedInputHandlers() {\n      return {\n        input: this.onInputInput,\n        change: this.onInputChange,\n        keydown: this.onInputKeydown,\n        reset: this.reset\n      };\n    },\n    computedSeparator: function computedSeparator() {\n      // Merge the array into a string\n      return concat(this.separator).filter(isString).filter(identity).join('');\n    },\n    computedSeparatorRegExp: function computedSeparatorRegExp() {\n      // We use a computed prop here to precompile the RegExp\n      // The RegExp is a character class RE in the form of `/[abc]+/`\n      // where a, b, and c are the valid separator characters\n      // -> `tags = str.split(/[abc]+/).filter(t => t)`\n      var separator = this.computedSeparator;\n      return separator ? new RegExp(\"[\".concat(escapeRegExpChars(separator), \"]+\")) : null;\n    },\n    computedJoiner: function computedJoiner() {\n      // When tag(s) are invalid or duplicate, we leave them\n      // in the input so that the user can see them\n      // If there are more than one tag in the input, we use the\n      // first separator character as the separator in the input\n      // We append a space if the first separator is not a space\n      var joiner = this.computedSeparator.charAt(0);\n      return joiner !== ' ' ? \"\".concat(joiner, \" \") : joiner;\n    },\n    computeIgnoreInputFocusSelector: function computeIgnoreInputFocusSelector() {\n      // Normalize to an single selector with selectors separated by `,`\n      return concat(this.ignoreInputFocusSelector).filter(identity).join(',').trim();\n    },\n    disableAddButton: function disableAddButton() {\n      var _this = this; // If 'Add' button should be disabled\n      // If the input contains at least one tag that can\n      // be added, then the 'Add' button should be enabled\n\n\n      var newTag = trim(this.newTag);\n      return newTag === '' || !this.splitTags(newTag).some(function (t) {\n        return !arrayIncludes(_this.tags, t) && _this.validateTag(t);\n      });\n    },\n    duplicateTags: function duplicateTags() {\n      return this.tagsState.duplicate;\n    },\n    hasDuplicateTags: function hasDuplicateTags() {\n      return this.duplicateTags.length > 0;\n    },\n    invalidTags: function invalidTags() {\n      return this.tagsState.invalid;\n    },\n    hasInvalidTags: function hasInvalidTags() {\n      return this.invalidTags.length > 0;\n    },\n    isLimitReached: function isLimitReached() {\n      var limit = this.limit;\n      return isNumber(limit) && limit >= 0 && this.tags.length >= limit;\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue) {\n    this.tags = cleanTags(newValue);\n  }), _defineProperty(_watch, \"tags\", function tags(newValue, oldValue) {\n    // Update the `v-model` (if it differs from the value prop)\n    if (!looseEqual(newValue, this[MODEL_PROP_NAME])) {\n      this.$emit(MODEL_EVENT_NAME, newValue);\n    }\n\n    if (!looseEqual(newValue, oldValue)) {\n      newValue = concat(newValue).filter(identity);\n      oldValue = concat(oldValue).filter(identity);\n      this.removedTags = oldValue.filter(function (old) {\n        return !arrayIncludes(newValue, old);\n      });\n    }\n  }), _defineProperty(_watch, \"tagsState\", function tagsState(newValue, oldValue) {\n    // Emit a tag-state event when the `tagsState` object changes\n    if (!looseEqual(newValue, oldValue)) {\n      this.$emit(EVENT_NAME_TAG_STATE, newValue.valid, newValue.invalid, newValue.duplicate);\n    }\n  }), _watch),\n  created: function created() {\n    // We do this in created to make sure an input event emits\n    // if the cleaned tags are not equal to the value prop\n    this.tags = cleanTags(this[MODEL_PROP_NAME]);\n  },\n  mounted: function mounted() {\n    var _this2 = this; // Listen for form reset events, to reset the tags input\n\n\n    var $form = closest('form', this.$el);\n\n    if ($form) {\n      eventOn($form, 'reset', this.reset, EVENT_OPTIONS_PASSIVE);\n      this.$on(HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n        eventOff($form, 'reset', _this2.reset, EVENT_OPTIONS_PASSIVE);\n      });\n    }\n  },\n  methods: {\n    addTag: function addTag(newTag) {\n      newTag = isString(newTag) ? newTag : this.newTag;\n      /* istanbul ignore next */\n\n      if (this.disabled || trim(newTag) === '' || this.isLimitReached) {\n        // Early exit\n        return;\n      }\n\n      var parsed = this.parseTags(newTag); // Add any new tags to the `tags` array, or if the\n      // array of `allTags` is empty, we clear the input\n\n      if (parsed.valid.length > 0 || parsed.all.length === 0) {\n        // Clear the user input element (and leave in any invalid/duplicate tag(s)\n\n        /* istanbul ignore if: full testing to be added later */\n        if (matches(this.getInput(), 'select')) {\n          // The following is needed to properly\n          // work with `<select>` elements\n          this.newTag = '';\n        } else {\n          var invalidAndDuplicates = [].concat(_toConsumableArray(parsed.invalid), _toConsumableArray(parsed.duplicate));\n          this.newTag = parsed.all.filter(function (tag) {\n            return arrayIncludes(invalidAndDuplicates, tag);\n          }).join(this.computedJoiner).concat(invalidAndDuplicates.length > 0 ? this.computedJoiner.charAt(0) : '');\n        }\n      }\n\n      if (parsed.valid.length > 0) {\n        // We add the new tags in one atomic operation\n        // to trigger reactivity once (instead of once per tag)\n        // We do this after we update the new tag input value\n        // `concat()` can be faster than array spread, when both args are arrays\n        this.tags = concat(this.tags, parsed.valid);\n      }\n\n      this.tagsState = parsed; // Attempt to re-focus the input (specifically for when using the Add\n      // button, as the button disappears after successfully adding a tag\n\n      this.focus();\n    },\n    removeTag: function removeTag(tag) {\n      var _this3 = this;\n      /* istanbul ignore next */\n\n\n      if (this.disabled) {\n        return;\n      } // TODO:\n      //   Add `onRemoveTag(tag)` user method, which if returns `false`\n      //   will prevent the tag from being removed (i.e. confirmation)\n      //   Or emit cancelable `BvEvent`\n\n\n      this.tags = this.tags.filter(function (t) {\n        return t !== tag;\n      }); // Return focus to the input (if possible)\n\n      this.$nextTick(function () {\n        _this3.focus();\n      });\n    },\n    reset: function reset() {\n      var _this4 = this;\n\n      this.newTag = '';\n      this.tags = [];\n      this.$nextTick(function () {\n        _this4.removedTags = [];\n        _this4.tagsState = cleanTagsState();\n      });\n    },\n    // --- Input element event handlers ---\n    onInputInput: function onInputInput(event) {\n      /* istanbul ignore next: hard to test composition events */\n      if (this.disabled || isEvent(event) && event.target.composing) {\n        // `event.target.composing` is set by Vue (`v-model` directive)\n        // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n        return;\n      }\n\n      var newTag = processEventValue(event);\n      var separatorRe = this.computedSeparatorRegExp;\n\n      if (this.newTag !== newTag) {\n        this.newTag = newTag;\n      } // We ignore leading whitespace for the following\n\n\n      newTag = trimLeft(newTag);\n\n      if (separatorRe && separatorRe.test(newTag.slice(-1))) {\n        // A trailing separator character was entered, so add the tag(s)\n        // Note: More than one tag on input event is possible via copy/paste\n        this.addTag();\n      } else {\n        // Validate (parse tags) on input event\n        this.tagsState = newTag === '' ? cleanTagsState() : this.parseTags(newTag);\n      }\n    },\n    onInputChange: function onInputChange(event) {\n      // Change is triggered on `<input>` blur, or `<select>` selected\n      // This event is opt-in\n      if (!this.disabled && this.addOnChange) {\n        var newTag = processEventValue(event);\n        /* istanbul ignore next */\n\n        if (this.newTag !== newTag) {\n          this.newTag = newTag;\n        }\n\n        this.addTag();\n      }\n    },\n    onInputKeydown: function onInputKeydown(event) {\n      // Early exit\n\n      /* istanbul ignore next */\n      if (this.disabled || !isEvent(event)) {\n        return;\n      }\n\n      var keyCode = event.keyCode;\n      var value = event.target.value || '';\n      /* istanbul ignore else: testing to be added later */\n\n      if (!this.noAddOnEnter && keyCode === CODE_ENTER) {\n        // Attempt to add the tag when user presses enter\n        stopEvent(event, {\n          propagation: false\n        });\n        this.addTag();\n      } else if (this.removeOnDelete && (keyCode === CODE_BACKSPACE || keyCode === CODE_DELETE) && value === '') {\n        // Remove the last tag if the user pressed backspace/delete and the input is empty\n        stopEvent(event, {\n          propagation: false\n        });\n        this.tags = this.tags.slice(0, -1);\n      }\n    },\n    // --- Wrapper event handlers ---\n    onClick: function onClick(event) {\n      var _this5 = this;\n\n      var ignoreFocusSelector = this.computeIgnoreInputFocusSelector;\n      var target = event.target;\n\n      if (!this.disabled && !isActiveElement(target) && (!ignoreFocusSelector || !closest(ignoreFocusSelector, target, true))) {\n        this.$nextTick(function () {\n          _this5.focus();\n        });\n      }\n    },\n    onFocusin: function onFocusin() {\n      this.hasFocus = true;\n    },\n    onFocusout: function onFocusout() {\n      this.hasFocus = false;\n    },\n    handleAutofocus: function handleAutofocus() {\n      var _this6 = this;\n\n      this.$nextTick(function () {\n        requestAF(function () {\n          if (_this6.autofocus && !_this6.disabled) {\n            _this6.focus();\n          }\n        });\n      });\n    },\n    // --- Public methods ---\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.getInput());\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.getInput());\n      }\n    },\n    // --- Private methods ---\n    splitTags: function splitTags(newTag) {\n      // Split the input into an array of raw tags\n      newTag = toString(newTag);\n      var separatorRe = this.computedSeparatorRegExp; // Split the tag(s) via the optional separator\n      // Normally only a single tag is provided, but copy/paste\n      // can enter multiple tags in a single operation\n\n      return (separatorRe ? newTag.split(separatorRe) : [newTag]).map(trim).filter(identity);\n    },\n    parseTags: function parseTags(newTag) {\n      var _this7 = this; // Takes `newTag` value and parses it into `validTags`,\n      // `invalidTags`, and duplicate tags as an object\n      // Split the input into raw tags\n\n\n      var tags = this.splitTags(newTag); // Base results\n\n      var parsed = {\n        all: tags,\n        valid: [],\n        invalid: [],\n        duplicate: []\n      }; // Parse the unique tags\n\n      tags.forEach(function (tag) {\n        if (arrayIncludes(_this7.tags, tag) || arrayIncludes(parsed.valid, tag)) {\n          // Unique duplicate tags\n          if (!arrayIncludes(parsed.duplicate, tag)) {\n            parsed.duplicate.push(tag);\n          }\n        } else if (_this7.validateTag(tag)) {\n          // We only add unique/valid tags\n          parsed.valid.push(tag);\n        } else {\n          // Unique invalid tags\n          if (!arrayIncludes(parsed.invalid, tag)) {\n            parsed.invalid.push(tag);\n          }\n        }\n      });\n      return parsed;\n    },\n    validateTag: function validateTag(tag) {\n      var tagValidator = this.tagValidator;\n      return hasPropFunction(tagValidator) ? tagValidator(tag) : true;\n    },\n    getInput: function getInput() {\n      // Returns the input element reference (or null if not found)\n      // We need to escape `computedInputId` since it can be user-provided\n      return select(\"#\".concat(cssEscape(this.computedInputId)), this.$el);\n    },\n    // Default User Interface render\n    defaultRender: function defaultRender(_ref) {\n      var addButtonText = _ref.addButtonText,\n          addButtonVariant = _ref.addButtonVariant,\n          addTag = _ref.addTag,\n          disableAddButton = _ref.disableAddButton,\n          disabled = _ref.disabled,\n          duplicateTagText = _ref.duplicateTagText,\n          inputAttrs = _ref.inputAttrs,\n          inputClass = _ref.inputClass,\n          inputHandlers = _ref.inputHandlers,\n          inputType = _ref.inputType,\n          invalidTagText = _ref.invalidTagText,\n          isDuplicate = _ref.isDuplicate,\n          isInvalid = _ref.isInvalid,\n          isLimitReached = _ref.isLimitReached,\n          limitTagsText = _ref.limitTagsText,\n          noTagRemove = _ref.noTagRemove,\n          placeholder = _ref.placeholder,\n          removeTag = _ref.removeTag,\n          tagClass = _ref.tagClass,\n          tagPills = _ref.tagPills,\n          tagRemoveLabel = _ref.tagRemoveLabel,\n          tagVariant = _ref.tagVariant,\n          tags = _ref.tags;\n      var h = this.$createElement; // Make the list of tags\n\n      var $tags = tags.map(function (tag) {\n        tag = toString(tag);\n        return h(BFormTag, {\n          class: tagClass,\n          // `BFormTag` will auto generate an ID\n          // so we do not need to set the ID prop\n          props: {\n            disabled: disabled,\n            noRemove: noTagRemove,\n            pill: tagPills,\n            removeLabel: tagRemoveLabel,\n            tag: 'li',\n            title: tag,\n            variant: tagVariant\n          },\n          on: {\n            remove: function remove() {\n              return removeTag(tag);\n            }\n          },\n          key: \"tags_\".concat(tag)\n        }, tag);\n      }); // Feedback IDs if needed\n\n      var invalidFeedbackId = invalidTagText && isInvalid ? this.safeId('__invalid_feedback__') : null;\n      var duplicateFeedbackId = duplicateTagText && isDuplicate ? this.safeId('__duplicate_feedback__') : null;\n      var limitFeedbackId = limitTagsText && isLimitReached ? this.safeId('__limit_feedback__') : null; // Compute the `aria-describedby` attribute value\n\n      var ariaDescribedby = [inputAttrs['aria-describedby'], invalidFeedbackId, duplicateFeedbackId, limitFeedbackId].filter(identity).join(' '); // Input\n\n      var $input = h('input', {\n        staticClass: 'b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0',\n        class: inputClass,\n        style: {\n          outline: 0,\n          minWidth: '5rem'\n        },\n        attrs: _objectSpread(_objectSpread({}, inputAttrs), {}, {\n          'aria-describedby': ariaDescribedby || null,\n          type: inputType,\n          placeholder: placeholder || null\n        }),\n        domProps: {\n          value: inputAttrs.value\n        },\n        on: inputHandlers,\n        // Directive needed to get `event.target.composing` set (if needed)\n        directives: [{\n          name: 'model',\n          value: inputAttrs.value\n        }],\n        ref: 'input'\n      }); // Add button\n\n      var $button = h(BButton, {\n        staticClass: 'b-form-tags-button py-0',\n        class: {\n          // Only show the button if the tag can be added\n          // We use the `invisible` class instead of not rendering\n          // the button, so that we maintain layout to prevent\n          // the user input from jumping around\n          invisible: disableAddButton\n        },\n        style: {\n          fontSize: '90%'\n        },\n        props: {\n          disabled: disableAddButton || isLimitReached,\n          variant: addButtonVariant\n        },\n        on: {\n          click: function click() {\n            return addTag();\n          }\n        },\n        ref: 'button'\n      }, [this.normalizeSlot(SLOT_NAME_ADD_BUTTON_TEXT) || addButtonText]); // ID of the tags + input `<ul>` list\n      // Note we could concatenate `inputAttrs.id` with '__tag_list__'\n      // but `inputId` may be `null` until after mount\n      // `safeId()` returns `null`, if no user provided ID,\n      // until after mount when a unique ID is generated\n\n      var tagListId = this.safeId('__tag_list__');\n      var $field = h('li', {\n        staticClass: 'b-from-tags-field flex-grow-1',\n        attrs: {\n          role: 'none',\n          'aria-live': 'off',\n          'aria-controls': tagListId\n        },\n        key: 'tags_field'\n      }, [h('div', {\n        staticClass: 'd-flex',\n        attrs: {\n          role: 'group'\n        }\n      }, [$input, $button])]); // Wrap in an unordered list element (we use a list for accessibility)\n\n      var $ul = h('ul', {\n        staticClass: 'b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center',\n        attrs: {\n          id: tagListId\n        },\n        key: 'tags_list'\n      }, [$tags, $field]); // Assemble the feedback\n\n      var $feedback = h();\n\n      if (invalidTagText || duplicateTagText || limitTagsText) {\n        // Add an aria live region for the invalid/duplicate tag\n        // messages if the user has not disabled the messages\n        var joiner = this.computedJoiner; // Invalid tag feedback if needed (error)\n\n        var $invalid = h();\n\n        if (invalidFeedbackId) {\n          $invalid = h(BFormInvalidFeedback, {\n            props: {\n              id: invalidFeedbackId,\n              forceShow: true\n            },\n            key: 'tags_invalid_feedback'\n          }, [this.invalidTagText, ': ', this.invalidTags.join(joiner)]);\n        } // Duplicate tag feedback if needed (warning, not error)\n\n\n        var $duplicate = h();\n\n        if (duplicateFeedbackId) {\n          $duplicate = h(BFormText, {\n            props: {\n              id: duplicateFeedbackId\n            },\n            key: 'tags_duplicate_feedback'\n          }, [this.duplicateTagText, ': ', this.duplicateTags.join(joiner)]);\n        } // Limit tags feedback if needed (warning, not error)\n\n\n        var $limit = h();\n\n        if (limitFeedbackId) {\n          $limit = h(BFormText, {\n            props: {\n              id: limitFeedbackId\n            },\n            key: 'tags_limit_feedback'\n          }, [limitTagsText]);\n        }\n\n        $feedback = h('div', {\n          attrs: {\n            'aria-live': 'polite',\n            'aria-atomic': 'true'\n          },\n          key: 'tags_feedback'\n        }, [$invalid, $duplicate, $limit]);\n      } // Return the content\n\n\n      return [$ul, $feedback];\n    }\n  },\n  render: function render(h) {\n    var name = this.name,\n        disabled = this.disabled,\n        required = this.required,\n        form = this.form,\n        tags = this.tags,\n        computedInputId = this.computedInputId,\n        hasFocus = this.hasFocus,\n        noOuterFocus = this.noOuterFocus; // Scoped slot properties\n\n    var scope = _objectSpread({\n      // Array of tags (shallow copy to prevent mutations)\n      tags: tags.slice(),\n      // <input> v-bind:inputAttrs\n      inputAttrs: this.computedInputAttrs,\n      // We don't include this in the attrs, as users may want to override this\n      inputType: this.computedInputType,\n      // <input> v-on:inputHandlers\n      inputHandlers: this.computedInputHandlers,\n      // Methods\n      removeTag: this.removeTag,\n      addTag: this.addTag,\n      reset: this.reset,\n      // <input> :id=\"inputId\"\n      inputId: computedInputId,\n      // Invalid/Duplicate state information\n      isInvalid: this.hasInvalidTags,\n      invalidTags: this.invalidTags.slice(),\n      isDuplicate: this.hasDuplicateTags,\n      duplicateTags: this.duplicateTags.slice(),\n      isLimitReached: this.isLimitReached,\n      // If the 'Add' button should be disabled\n      disableAddButton: this.disableAddButton\n    }, pick(this.$props, ['addButtonText', 'addButtonVariant', 'disabled', 'duplicateTagText', 'form', 'inputClass', 'invalidTagText', 'limit', 'limitTagsText', 'noTagRemove', 'placeholder', 'required', 'separator', 'size', 'state', 'tagClass', 'tagPills', 'tagRemoveLabel', 'tagVariant'])); // Generate the user interface\n\n\n    var $content = this.normalizeSlot(SLOT_NAME_DEFAULT, scope) || this.defaultRender(scope); // Generate the `aria-live` region for the current value(s)\n\n    var $output = h('output', {\n      staticClass: 'sr-only',\n      attrs: {\n        id: this.safeId('__selected_tags__'),\n        role: 'status',\n        for: computedInputId,\n        'aria-live': hasFocus ? 'polite' : 'off',\n        'aria-atomic': 'true',\n        'aria-relevant': 'additions text'\n      }\n    }, this.tags.join(', ')); // Removed tag live region\n\n    var $removed = h('div', {\n      staticClass: 'sr-only',\n      attrs: {\n        id: this.safeId('__removed_tags__'),\n        role: 'status',\n        'aria-live': hasFocus ? 'assertive' : 'off',\n        'aria-atomic': 'true'\n      }\n    }, this.removedTags.length > 0 ? \"(\".concat(this.tagRemovedLabel, \") \").concat(this.removedTags.join(', ')) : ''); // Add hidden inputs for form submission\n\n    var $hidden = h();\n\n    if (name && !disabled) {\n      // We add hidden inputs for each tag if a name is provided\n      // When there are currently no tags, a visually hidden input\n      // with empty value is rendered for proper required handling\n      var hasTags = tags.length > 0;\n      $hidden = (hasTags ? tags : ['']).map(function (tag) {\n        return h('input', {\n          class: {\n            'sr-only': !hasTags\n          },\n          attrs: {\n            type: hasTags ? 'hidden' : 'text',\n            value: tag,\n            required: required,\n            name: name,\n            form: form\n          },\n          key: \"tag_input_\".concat(tag)\n        });\n      });\n    } // Return the rendered output\n\n\n    return h('div', {\n      staticClass: 'b-form-tags form-control h-auto',\n      class: [{\n        focus: hasFocus && !noOuterFocus && !disabled,\n        disabled: disabled\n      }, this.sizeFormClass, this.stateClass],\n      attrs: {\n        id: this.safeId(),\n        role: 'group',\n        tabindex: disabled || noOuterFocus ? null : '-1',\n        'aria-describedby': this.safeId('__selected_tags__')\n      },\n      on: {\n        click: this.onClick,\n        focusin: this.onFocusin,\n        focusout: this.onFocusout\n      }\n    }, [$output, $removed, $content, $hidden]);\n  }\n});","map":{"version":3,"sources":["C:/Users/Yago/Documents/Eclipse/Yago/farolshopping/src/frontend/farolshopping/node_modules/bootstrap-vue/esm/components/form-tags/form-tags.js"],"names":["_watch","_toConsumableArray","arr","_arrayWithoutHoles","_iterableToArray","_unsupportedIterableToArray","_nonIterableSpread","TypeError","o","minLen","_arrayLikeToArray","n","Object","prototype","toString","call","slice","constructor","name","Array","from","test","iter","Symbol","iterator","isArray","len","length","i","arr2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","arguments","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","configurable","writable","Vue","NAME_FORM_TAGS","EVENT_NAME_TAG_STATE","EVENT_OPTIONS_PASSIVE","HOOK_EVENT_NAME_BEFORE_DESTROY","CODE_BACKSPACE","CODE_DELETE","CODE_ENTER","PROP_TYPE_ARRAY","PROP_TYPE_ARRAY_OBJECT_STRING","PROP_TYPE_ARRAY_STRING","PROP_TYPE_BOOLEAN","PROP_TYPE_FUNCTION","PROP_TYPE_NUMBER","PROP_TYPE_OBJECT","PROP_TYPE_STRING","RX_SPACES","SLOT_NAME_DEFAULT","SLOT_NAME_ADD_BUTTON_TEXT","arrayIncludes","concat","cssEscape","attemptBlur","attemptFocus","closest","isActiveElement","matches","requestAF","select","eventOn","eventOff","stopEvent","identity","isEvent","isNumber","isString","looseEqual","makeModelMixin","pick","sortKeys","hasPropFunction","makeProp","makePropsConfigurable","escapeRegExp","trim","trimLeft","formControlMixin","props","formControlProps","formSizeMixin","formSizeProps","formStateMixin","formStateProps","idMixin","idProps","normalizeSlotMixin","BButton","BFormInvalidFeedback","BFormText","BFormTag","_makeModelMixin","type","defaultValue","modelMixin","mixin","modelProps","MODEL_PROP_NAME","prop","MODEL_EVENT_NAME","event","TYPES","DEFAULT_INPUT_FOCUS_SELECTOR","join","escapeRegExpChars","str","replace","cleanTags","tags","map","tag","index","indexOf","processEventValue","cleanTagsState","all","valid","invalid","duplicate","addButtonText","addButtonVariant","addOnChange","duplicateTagText","ignoreInputFocusSelector","inputAttrs","inputClass","inputId","inputType","invalidTagText","limit","limitTagsText","noAddOnEnter","noOuterFocus","noTagRemove","placeholder","removeOnDelete","separator","tagClass","tagPills","tagRemoveLabel","tagRemovedLabel","tagValidator","tagVariant","BFormTags","extend","mixins","data","hasFocus","newTag","removedTags","tagsState","computed","computedInputId","safeId","computedInputType","computedInputAttrs","disabled","form","id","computedInputHandlers","input","onInputInput","change","onInputChange","keydown","onInputKeydown","reset","computedSeparator","computedSeparatorRegExp","RegExp","computedJoiner","joiner","charAt","computeIgnoreInputFocusSelector","disableAddButton","_this","splitTags","some","t","validateTag","duplicateTags","hasDuplicateTags","invalidTags","hasInvalidTags","isLimitReached","watch","newValue","oldValue","$emit","old","created","mounted","_this2","$form","$el","$on","methods","addTag","parsed","parseTags","getInput","invalidAndDuplicates","focus","removeTag","_this3","$nextTick","_this4","composing","separatorRe","keyCode","propagation","onClick","_this5","ignoreFocusSelector","onFocusin","onFocusout","handleAutofocus","_this6","autofocus","blur","split","_this7","defaultRender","_ref","inputHandlers","isDuplicate","isInvalid","h","$createElement","$tags","class","noRemove","pill","removeLabel","title","variant","on","remove","invalidFeedbackId","duplicateFeedbackId","limitFeedbackId","ariaDescribedby","$input","staticClass","style","outline","minWidth","attrs","domProps","directives","ref","$button","invisible","fontSize","click","normalizeSlot","tagListId","$field","role","$ul","$feedback","$invalid","forceShow","$duplicate","$limit","render","required","scope","$props","$content","$output","for","$removed","$hidden","hasTags","sizeFormClass","stateClass","tabindex","focusin","focusout"],"mappings":"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","sourcesContent":["var _watch;\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Tagged input form control\n// Based loosely on https://adamwathan.me/renderless-components-in-vuejs/\nimport { Vue } from '../../vue';\nimport { NAME_FORM_TAGS } from '../../constants/components';\nimport { EVENT_NAME_TAG_STATE, EVENT_OPTIONS_PASSIVE, HOOK_EVENT_NAME_BEFORE_DESTROY } from '../../constants/events';\nimport { CODE_BACKSPACE, CODE_DELETE, CODE_ENTER } from '../../constants/key-codes';\nimport { PROP_TYPE_ARRAY, PROP_TYPE_ARRAY_OBJECT_STRING, PROP_TYPE_ARRAY_STRING, PROP_TYPE_BOOLEAN, PROP_TYPE_FUNCTION, PROP_TYPE_NUMBER, PROP_TYPE_OBJECT, PROP_TYPE_STRING } from '../../constants/props';\nimport { RX_SPACES } from '../../constants/regex';\nimport { SLOT_NAME_DEFAULT, SLOT_NAME_ADD_BUTTON_TEXT } from '../../constants/slots';\nimport { arrayIncludes, concat } from '../../utils/array';\nimport { cssEscape } from '../../utils/css-escape';\nimport { attemptBlur, attemptFocus, closest, isActiveElement, matches, requestAF, select } from '../../utils/dom';\nimport { eventOn, eventOff, stopEvent } from '../../utils/events';\nimport { identity } from '../../utils/identity';\nimport { isEvent, isNumber, isString } from '../../utils/inspect';\nimport { looseEqual } from '../../utils/loose-equal';\nimport { makeModelMixin } from '../../utils/model';\nimport { pick, sortKeys } from '../../utils/object';\nimport { hasPropFunction, makeProp, makePropsConfigurable } from '../../utils/props';\nimport { escapeRegExp, toString, trim, trimLeft } from '../../utils/string';\nimport { formControlMixin, props as formControlProps } from '../../mixins/form-control';\nimport { formSizeMixin, props as formSizeProps } from '../../mixins/form-size';\nimport { formStateMixin, props as formStateProps } from '../../mixins/form-state';\nimport { idMixin, props as idProps } from '../../mixins/id';\nimport { normalizeSlotMixin } from '../../mixins/normalize-slot';\nimport { BButton } from '../button/button';\nimport { BFormInvalidFeedback } from '../form/form-invalid-feedback';\nimport { BFormText } from '../form/form-text';\nimport { BFormTag } from './form-tag'; // --- Constants ---\n\nvar _makeModelMixin = makeModelMixin('value', {\n  type: PROP_TYPE_ARRAY,\n  defaultValue: []\n}),\n    modelMixin = _makeModelMixin.mixin,\n    modelProps = _makeModelMixin.props,\n    MODEL_PROP_NAME = _makeModelMixin.prop,\n    MODEL_EVENT_NAME = _makeModelMixin.event; // Supported input types (for built in input)\n\n\nvar TYPES = ['text', 'email', 'tel', 'url', 'number']; // Default ignore input focus selector\n\nvar DEFAULT_INPUT_FOCUS_SELECTOR = ['.b-form-tag', 'button', 'input', 'select'].join(' '); // --- Helper methods ---\n// Escape special chars in string and replace\n// contiguous spaces with a whitespace match\n\nvar escapeRegExpChars = function escapeRegExpChars(str) {\n  return escapeRegExp(str).replace(RX_SPACES, '\\\\s');\n}; // Remove leading/trailing spaces from array of tags and remove duplicates\n\n\nvar cleanTags = function cleanTags(tags) {\n  return concat(tags).map(function (tag) {\n    return trim(toString(tag));\n  }).filter(function (tag, index, arr) {\n    return tag.length > 0 && arr.indexOf(tag) === index;\n  });\n}; // Processes an input/change event, normalizing string or event argument\n\n\nvar processEventValue = function processEventValue(event) {\n  return isString(event) ? event : isEvent(event) ? event.target.value || '' : '';\n}; // Returns a fresh empty `tagsState` object\n\n\nvar cleanTagsState = function cleanTagsState() {\n  return {\n    all: [],\n    valid: [],\n    invalid: [],\n    duplicate: []\n  };\n}; // --- Props ---\n\n\nvar props = makePropsConfigurable(sortKeys(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, idProps), modelProps), formControlProps), formSizeProps), formStateProps), {}, {\n  addButtonText: makeProp(PROP_TYPE_STRING, 'Add'),\n  addButtonVariant: makeProp(PROP_TYPE_STRING, 'outline-secondary'),\n  // Enable change event triggering tag addition\n  // Handy if using <select> as the input\n  addOnChange: makeProp(PROP_TYPE_BOOLEAN, false),\n  duplicateTagText: makeProp(PROP_TYPE_STRING, 'Duplicate tag(s)'),\n  // Disable the input focus behavior when clicking\n  // on element matching the selector (or selectors)\n  ignoreInputFocusSelector: makeProp(PROP_TYPE_ARRAY_STRING, DEFAULT_INPUT_FOCUS_SELECTOR),\n  // Additional attributes to add to the input element\n  inputAttrs: makeProp(PROP_TYPE_OBJECT, {}),\n  inputClass: makeProp(PROP_TYPE_ARRAY_OBJECT_STRING),\n  inputId: makeProp(PROP_TYPE_STRING),\n  inputType: makeProp(PROP_TYPE_STRING, 'text', function (value) {\n    return arrayIncludes(TYPES, value);\n  }),\n  invalidTagText: makeProp(PROP_TYPE_STRING, 'Invalid tag(s)'),\n  limit: makeProp(PROP_TYPE_NUMBER),\n  limitTagsText: makeProp(PROP_TYPE_STRING, 'Tag limit reached'),\n  // Disable ENTER key from triggering tag addition\n  noAddOnEnter: makeProp(PROP_TYPE_BOOLEAN, false),\n  // Disable the focus ring on the root element\n  noOuterFocus: makeProp(PROP_TYPE_BOOLEAN, false),\n  noTagRemove: makeProp(PROP_TYPE_BOOLEAN, false),\n  placeholder: makeProp(PROP_TYPE_STRING, 'Add tag...'),\n  // Enable deleting last tag in list when CODE_BACKSPACE is\n  // pressed and input is empty\n  removeOnDelete: makeProp(PROP_TYPE_BOOLEAN, false),\n  // Character (or characters) that trigger adding tags\n  separator: makeProp(PROP_TYPE_ARRAY_STRING),\n  tagClass: makeProp(PROP_TYPE_ARRAY_OBJECT_STRING),\n  tagPills: makeProp(PROP_TYPE_BOOLEAN, false),\n  tagRemoveLabel: makeProp(PROP_TYPE_STRING, 'Remove tag'),\n  tagRemovedLabel: makeProp(PROP_TYPE_STRING, 'Tag removed'),\n  tagValidator: makeProp(PROP_TYPE_FUNCTION),\n  tagVariant: makeProp(PROP_TYPE_STRING, 'secondary')\n})), NAME_FORM_TAGS); // --- Main component ---\n// @vue/component\n\nexport var BFormTags = /*#__PURE__*/Vue.extend({\n  name: NAME_FORM_TAGS,\n  mixins: [idMixin, modelMixin, formControlMixin, formSizeMixin, formStateMixin, normalizeSlotMixin],\n  props: props,\n  data: function data() {\n    return {\n      hasFocus: false,\n      newTag: '',\n      tags: [],\n      // Tags that were removed\n      removedTags: [],\n      // Populated when tags are parsed\n      tagsState: cleanTagsState()\n    };\n  },\n  computed: {\n    computedInputId: function computedInputId() {\n      return this.inputId || this.safeId('__input__');\n    },\n    computedInputType: function computedInputType() {\n      // We only allow certain types\n      return arrayIncludes(TYPES, this.inputType) ? this.inputType : 'text';\n    },\n    computedInputAttrs: function computedInputAttrs() {\n      var disabled = this.disabled,\n          form = this.form;\n      return _objectSpread(_objectSpread({}, this.inputAttrs), {}, {\n        // Must have attributes\n        id: this.computedInputId,\n        value: this.newTag,\n        disabled: disabled,\n        form: form\n      });\n    },\n    computedInputHandlers: function computedInputHandlers() {\n      return {\n        input: this.onInputInput,\n        change: this.onInputChange,\n        keydown: this.onInputKeydown,\n        reset: this.reset\n      };\n    },\n    computedSeparator: function computedSeparator() {\n      // Merge the array into a string\n      return concat(this.separator).filter(isString).filter(identity).join('');\n    },\n    computedSeparatorRegExp: function computedSeparatorRegExp() {\n      // We use a computed prop here to precompile the RegExp\n      // The RegExp is a character class RE in the form of `/[abc]+/`\n      // where a, b, and c are the valid separator characters\n      // -> `tags = str.split(/[abc]+/).filter(t => t)`\n      var separator = this.computedSeparator;\n      return separator ? new RegExp(\"[\".concat(escapeRegExpChars(separator), \"]+\")) : null;\n    },\n    computedJoiner: function computedJoiner() {\n      // When tag(s) are invalid or duplicate, we leave them\n      // in the input so that the user can see them\n      // If there are more than one tag in the input, we use the\n      // first separator character as the separator in the input\n      // We append a space if the first separator is not a space\n      var joiner = this.computedSeparator.charAt(0);\n      return joiner !== ' ' ? \"\".concat(joiner, \" \") : joiner;\n    },\n    computeIgnoreInputFocusSelector: function computeIgnoreInputFocusSelector() {\n      // Normalize to an single selector with selectors separated by `,`\n      return concat(this.ignoreInputFocusSelector).filter(identity).join(',').trim();\n    },\n    disableAddButton: function disableAddButton() {\n      var _this = this;\n\n      // If 'Add' button should be disabled\n      // If the input contains at least one tag that can\n      // be added, then the 'Add' button should be enabled\n      var newTag = trim(this.newTag);\n      return newTag === '' || !this.splitTags(newTag).some(function (t) {\n        return !arrayIncludes(_this.tags, t) && _this.validateTag(t);\n      });\n    },\n    duplicateTags: function duplicateTags() {\n      return this.tagsState.duplicate;\n    },\n    hasDuplicateTags: function hasDuplicateTags() {\n      return this.duplicateTags.length > 0;\n    },\n    invalidTags: function invalidTags() {\n      return this.tagsState.invalid;\n    },\n    hasInvalidTags: function hasInvalidTags() {\n      return this.invalidTags.length > 0;\n    },\n    isLimitReached: function isLimitReached() {\n      var limit = this.limit;\n      return isNumber(limit) && limit >= 0 && this.tags.length >= limit;\n    }\n  },\n  watch: (_watch = {}, _defineProperty(_watch, MODEL_PROP_NAME, function (newValue) {\n    this.tags = cleanTags(newValue);\n  }), _defineProperty(_watch, \"tags\", function tags(newValue, oldValue) {\n    // Update the `v-model` (if it differs from the value prop)\n    if (!looseEqual(newValue, this[MODEL_PROP_NAME])) {\n      this.$emit(MODEL_EVENT_NAME, newValue);\n    }\n\n    if (!looseEqual(newValue, oldValue)) {\n      newValue = concat(newValue).filter(identity);\n      oldValue = concat(oldValue).filter(identity);\n      this.removedTags = oldValue.filter(function (old) {\n        return !arrayIncludes(newValue, old);\n      });\n    }\n  }), _defineProperty(_watch, \"tagsState\", function tagsState(newValue, oldValue) {\n    // Emit a tag-state event when the `tagsState` object changes\n    if (!looseEqual(newValue, oldValue)) {\n      this.$emit(EVENT_NAME_TAG_STATE, newValue.valid, newValue.invalid, newValue.duplicate);\n    }\n  }), _watch),\n  created: function created() {\n    // We do this in created to make sure an input event emits\n    // if the cleaned tags are not equal to the value prop\n    this.tags = cleanTags(this[MODEL_PROP_NAME]);\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n\n    // Listen for form reset events, to reset the tags input\n    var $form = closest('form', this.$el);\n\n    if ($form) {\n      eventOn($form, 'reset', this.reset, EVENT_OPTIONS_PASSIVE);\n      this.$on(HOOK_EVENT_NAME_BEFORE_DESTROY, function () {\n        eventOff($form, 'reset', _this2.reset, EVENT_OPTIONS_PASSIVE);\n      });\n    }\n  },\n  methods: {\n    addTag: function addTag(newTag) {\n      newTag = isString(newTag) ? newTag : this.newTag;\n      /* istanbul ignore next */\n\n      if (this.disabled || trim(newTag) === '' || this.isLimitReached) {\n        // Early exit\n        return;\n      }\n\n      var parsed = this.parseTags(newTag); // Add any new tags to the `tags` array, or if the\n      // array of `allTags` is empty, we clear the input\n\n      if (parsed.valid.length > 0 || parsed.all.length === 0) {\n        // Clear the user input element (and leave in any invalid/duplicate tag(s)\n\n        /* istanbul ignore if: full testing to be added later */\n        if (matches(this.getInput(), 'select')) {\n          // The following is needed to properly\n          // work with `<select>` elements\n          this.newTag = '';\n        } else {\n          var invalidAndDuplicates = [].concat(_toConsumableArray(parsed.invalid), _toConsumableArray(parsed.duplicate));\n          this.newTag = parsed.all.filter(function (tag) {\n            return arrayIncludes(invalidAndDuplicates, tag);\n          }).join(this.computedJoiner).concat(invalidAndDuplicates.length > 0 ? this.computedJoiner.charAt(0) : '');\n        }\n      }\n\n      if (parsed.valid.length > 0) {\n        // We add the new tags in one atomic operation\n        // to trigger reactivity once (instead of once per tag)\n        // We do this after we update the new tag input value\n        // `concat()` can be faster than array spread, when both args are arrays\n        this.tags = concat(this.tags, parsed.valid);\n      }\n\n      this.tagsState = parsed; // Attempt to re-focus the input (specifically for when using the Add\n      // button, as the button disappears after successfully adding a tag\n\n      this.focus();\n    },\n    removeTag: function removeTag(tag) {\n      var _this3 = this;\n\n      /* istanbul ignore next */\n      if (this.disabled) {\n        return;\n      } // TODO:\n      //   Add `onRemoveTag(tag)` user method, which if returns `false`\n      //   will prevent the tag from being removed (i.e. confirmation)\n      //   Or emit cancelable `BvEvent`\n\n\n      this.tags = this.tags.filter(function (t) {\n        return t !== tag;\n      }); // Return focus to the input (if possible)\n\n      this.$nextTick(function () {\n        _this3.focus();\n      });\n    },\n    reset: function reset() {\n      var _this4 = this;\n\n      this.newTag = '';\n      this.tags = [];\n      this.$nextTick(function () {\n        _this4.removedTags = [];\n        _this4.tagsState = cleanTagsState();\n      });\n    },\n    // --- Input element event handlers ---\n    onInputInput: function onInputInput(event) {\n      /* istanbul ignore next: hard to test composition events */\n      if (this.disabled || isEvent(event) && event.target.composing) {\n        // `event.target.composing` is set by Vue (`v-model` directive)\n        // https://github.com/vuejs/vue/blob/dev/src/platforms/web/runtime/directives/model.js\n        return;\n      }\n\n      var newTag = processEventValue(event);\n      var separatorRe = this.computedSeparatorRegExp;\n\n      if (this.newTag !== newTag) {\n        this.newTag = newTag;\n      } // We ignore leading whitespace for the following\n\n\n      newTag = trimLeft(newTag);\n\n      if (separatorRe && separatorRe.test(newTag.slice(-1))) {\n        // A trailing separator character was entered, so add the tag(s)\n        // Note: More than one tag on input event is possible via copy/paste\n        this.addTag();\n      } else {\n        // Validate (parse tags) on input event\n        this.tagsState = newTag === '' ? cleanTagsState() : this.parseTags(newTag);\n      }\n    },\n    onInputChange: function onInputChange(event) {\n      // Change is triggered on `<input>` blur, or `<select>` selected\n      // This event is opt-in\n      if (!this.disabled && this.addOnChange) {\n        var newTag = processEventValue(event);\n        /* istanbul ignore next */\n\n        if (this.newTag !== newTag) {\n          this.newTag = newTag;\n        }\n\n        this.addTag();\n      }\n    },\n    onInputKeydown: function onInputKeydown(event) {\n      // Early exit\n\n      /* istanbul ignore next */\n      if (this.disabled || !isEvent(event)) {\n        return;\n      }\n\n      var keyCode = event.keyCode;\n      var value = event.target.value || '';\n      /* istanbul ignore else: testing to be added later */\n\n      if (!this.noAddOnEnter && keyCode === CODE_ENTER) {\n        // Attempt to add the tag when user presses enter\n        stopEvent(event, {\n          propagation: false\n        });\n        this.addTag();\n      } else if (this.removeOnDelete && (keyCode === CODE_BACKSPACE || keyCode === CODE_DELETE) && value === '') {\n        // Remove the last tag if the user pressed backspace/delete and the input is empty\n        stopEvent(event, {\n          propagation: false\n        });\n        this.tags = this.tags.slice(0, -1);\n      }\n    },\n    // --- Wrapper event handlers ---\n    onClick: function onClick(event) {\n      var _this5 = this;\n\n      var ignoreFocusSelector = this.computeIgnoreInputFocusSelector;\n      var target = event.target;\n\n      if (!this.disabled && !isActiveElement(target) && (!ignoreFocusSelector || !closest(ignoreFocusSelector, target, true))) {\n        this.$nextTick(function () {\n          _this5.focus();\n        });\n      }\n    },\n    onFocusin: function onFocusin() {\n      this.hasFocus = true;\n    },\n    onFocusout: function onFocusout() {\n      this.hasFocus = false;\n    },\n    handleAutofocus: function handleAutofocus() {\n      var _this6 = this;\n\n      this.$nextTick(function () {\n        requestAF(function () {\n          if (_this6.autofocus && !_this6.disabled) {\n            _this6.focus();\n          }\n        });\n      });\n    },\n    // --- Public methods ---\n    focus: function focus() {\n      if (!this.disabled) {\n        attemptFocus(this.getInput());\n      }\n    },\n    blur: function blur() {\n      if (!this.disabled) {\n        attemptBlur(this.getInput());\n      }\n    },\n    // --- Private methods ---\n    splitTags: function splitTags(newTag) {\n      // Split the input into an array of raw tags\n      newTag = toString(newTag);\n      var separatorRe = this.computedSeparatorRegExp; // Split the tag(s) via the optional separator\n      // Normally only a single tag is provided, but copy/paste\n      // can enter multiple tags in a single operation\n\n      return (separatorRe ? newTag.split(separatorRe) : [newTag]).map(trim).filter(identity);\n    },\n    parseTags: function parseTags(newTag) {\n      var _this7 = this;\n\n      // Takes `newTag` value and parses it into `validTags`,\n      // `invalidTags`, and duplicate tags as an object\n      // Split the input into raw tags\n      var tags = this.splitTags(newTag); // Base results\n\n      var parsed = {\n        all: tags,\n        valid: [],\n        invalid: [],\n        duplicate: []\n      }; // Parse the unique tags\n\n      tags.forEach(function (tag) {\n        if (arrayIncludes(_this7.tags, tag) || arrayIncludes(parsed.valid, tag)) {\n          // Unique duplicate tags\n          if (!arrayIncludes(parsed.duplicate, tag)) {\n            parsed.duplicate.push(tag);\n          }\n        } else if (_this7.validateTag(tag)) {\n          // We only add unique/valid tags\n          parsed.valid.push(tag);\n        } else {\n          // Unique invalid tags\n          if (!arrayIncludes(parsed.invalid, tag)) {\n            parsed.invalid.push(tag);\n          }\n        }\n      });\n      return parsed;\n    },\n    validateTag: function validateTag(tag) {\n      var tagValidator = this.tagValidator;\n      return hasPropFunction(tagValidator) ? tagValidator(tag) : true;\n    },\n    getInput: function getInput() {\n      // Returns the input element reference (or null if not found)\n      // We need to escape `computedInputId` since it can be user-provided\n      return select(\"#\".concat(cssEscape(this.computedInputId)), this.$el);\n    },\n    // Default User Interface render\n    defaultRender: function defaultRender(_ref) {\n      var addButtonText = _ref.addButtonText,\n          addButtonVariant = _ref.addButtonVariant,\n          addTag = _ref.addTag,\n          disableAddButton = _ref.disableAddButton,\n          disabled = _ref.disabled,\n          duplicateTagText = _ref.duplicateTagText,\n          inputAttrs = _ref.inputAttrs,\n          inputClass = _ref.inputClass,\n          inputHandlers = _ref.inputHandlers,\n          inputType = _ref.inputType,\n          invalidTagText = _ref.invalidTagText,\n          isDuplicate = _ref.isDuplicate,\n          isInvalid = _ref.isInvalid,\n          isLimitReached = _ref.isLimitReached,\n          limitTagsText = _ref.limitTagsText,\n          noTagRemove = _ref.noTagRemove,\n          placeholder = _ref.placeholder,\n          removeTag = _ref.removeTag,\n          tagClass = _ref.tagClass,\n          tagPills = _ref.tagPills,\n          tagRemoveLabel = _ref.tagRemoveLabel,\n          tagVariant = _ref.tagVariant,\n          tags = _ref.tags;\n      var h = this.$createElement; // Make the list of tags\n\n      var $tags = tags.map(function (tag) {\n        tag = toString(tag);\n        return h(BFormTag, {\n          class: tagClass,\n          // `BFormTag` will auto generate an ID\n          // so we do not need to set the ID prop\n          props: {\n            disabled: disabled,\n            noRemove: noTagRemove,\n            pill: tagPills,\n            removeLabel: tagRemoveLabel,\n            tag: 'li',\n            title: tag,\n            variant: tagVariant\n          },\n          on: {\n            remove: function remove() {\n              return removeTag(tag);\n            }\n          },\n          key: \"tags_\".concat(tag)\n        }, tag);\n      }); // Feedback IDs if needed\n\n      var invalidFeedbackId = invalidTagText && isInvalid ? this.safeId('__invalid_feedback__') : null;\n      var duplicateFeedbackId = duplicateTagText && isDuplicate ? this.safeId('__duplicate_feedback__') : null;\n      var limitFeedbackId = limitTagsText && isLimitReached ? this.safeId('__limit_feedback__') : null; // Compute the `aria-describedby` attribute value\n\n      var ariaDescribedby = [inputAttrs['aria-describedby'], invalidFeedbackId, duplicateFeedbackId, limitFeedbackId].filter(identity).join(' '); // Input\n\n      var $input = h('input', {\n        staticClass: 'b-form-tags-input w-100 flex-grow-1 p-0 m-0 bg-transparent border-0',\n        class: inputClass,\n        style: {\n          outline: 0,\n          minWidth: '5rem'\n        },\n        attrs: _objectSpread(_objectSpread({}, inputAttrs), {}, {\n          'aria-describedby': ariaDescribedby || null,\n          type: inputType,\n          placeholder: placeholder || null\n        }),\n        domProps: {\n          value: inputAttrs.value\n        },\n        on: inputHandlers,\n        // Directive needed to get `event.target.composing` set (if needed)\n        directives: [{\n          name: 'model',\n          value: inputAttrs.value\n        }],\n        ref: 'input'\n      }); // Add button\n\n      var $button = h(BButton, {\n        staticClass: 'b-form-tags-button py-0',\n        class: {\n          // Only show the button if the tag can be added\n          // We use the `invisible` class instead of not rendering\n          // the button, so that we maintain layout to prevent\n          // the user input from jumping around\n          invisible: disableAddButton\n        },\n        style: {\n          fontSize: '90%'\n        },\n        props: {\n          disabled: disableAddButton || isLimitReached,\n          variant: addButtonVariant\n        },\n        on: {\n          click: function click() {\n            return addTag();\n          }\n        },\n        ref: 'button'\n      }, [this.normalizeSlot(SLOT_NAME_ADD_BUTTON_TEXT) || addButtonText]); // ID of the tags + input `<ul>` list\n      // Note we could concatenate `inputAttrs.id` with '__tag_list__'\n      // but `inputId` may be `null` until after mount\n      // `safeId()` returns `null`, if no user provided ID,\n      // until after mount when a unique ID is generated\n\n      var tagListId = this.safeId('__tag_list__');\n      var $field = h('li', {\n        staticClass: 'b-from-tags-field flex-grow-1',\n        attrs: {\n          role: 'none',\n          'aria-live': 'off',\n          'aria-controls': tagListId\n        },\n        key: 'tags_field'\n      }, [h('div', {\n        staticClass: 'd-flex',\n        attrs: {\n          role: 'group'\n        }\n      }, [$input, $button])]); // Wrap in an unordered list element (we use a list for accessibility)\n\n      var $ul = h('ul', {\n        staticClass: 'b-form-tags-list list-unstyled mb-0 d-flex flex-wrap align-items-center',\n        attrs: {\n          id: tagListId\n        },\n        key: 'tags_list'\n      }, [$tags, $field]); // Assemble the feedback\n\n      var $feedback = h();\n\n      if (invalidTagText || duplicateTagText || limitTagsText) {\n        // Add an aria live region for the invalid/duplicate tag\n        // messages if the user has not disabled the messages\n        var joiner = this.computedJoiner; // Invalid tag feedback if needed (error)\n\n        var $invalid = h();\n\n        if (invalidFeedbackId) {\n          $invalid = h(BFormInvalidFeedback, {\n            props: {\n              id: invalidFeedbackId,\n              forceShow: true\n            },\n            key: 'tags_invalid_feedback'\n          }, [this.invalidTagText, ': ', this.invalidTags.join(joiner)]);\n        } // Duplicate tag feedback if needed (warning, not error)\n\n\n        var $duplicate = h();\n\n        if (duplicateFeedbackId) {\n          $duplicate = h(BFormText, {\n            props: {\n              id: duplicateFeedbackId\n            },\n            key: 'tags_duplicate_feedback'\n          }, [this.duplicateTagText, ': ', this.duplicateTags.join(joiner)]);\n        } // Limit tags feedback if needed (warning, not error)\n\n\n        var $limit = h();\n\n        if (limitFeedbackId) {\n          $limit = h(BFormText, {\n            props: {\n              id: limitFeedbackId\n            },\n            key: 'tags_limit_feedback'\n          }, [limitTagsText]);\n        }\n\n        $feedback = h('div', {\n          attrs: {\n            'aria-live': 'polite',\n            'aria-atomic': 'true'\n          },\n          key: 'tags_feedback'\n        }, [$invalid, $duplicate, $limit]);\n      } // Return the content\n\n\n      return [$ul, $feedback];\n    }\n  },\n  render: function render(h) {\n    var name = this.name,\n        disabled = this.disabled,\n        required = this.required,\n        form = this.form,\n        tags = this.tags,\n        computedInputId = this.computedInputId,\n        hasFocus = this.hasFocus,\n        noOuterFocus = this.noOuterFocus; // Scoped slot properties\n\n    var scope = _objectSpread({\n      // Array of tags (shallow copy to prevent mutations)\n      tags: tags.slice(),\n      // <input> v-bind:inputAttrs\n      inputAttrs: this.computedInputAttrs,\n      // We don't include this in the attrs, as users may want to override this\n      inputType: this.computedInputType,\n      // <input> v-on:inputHandlers\n      inputHandlers: this.computedInputHandlers,\n      // Methods\n      removeTag: this.removeTag,\n      addTag: this.addTag,\n      reset: this.reset,\n      // <input> :id=\"inputId\"\n      inputId: computedInputId,\n      // Invalid/Duplicate state information\n      isInvalid: this.hasInvalidTags,\n      invalidTags: this.invalidTags.slice(),\n      isDuplicate: this.hasDuplicateTags,\n      duplicateTags: this.duplicateTags.slice(),\n      isLimitReached: this.isLimitReached,\n      // If the 'Add' button should be disabled\n      disableAddButton: this.disableAddButton\n    }, pick(this.$props, ['addButtonText', 'addButtonVariant', 'disabled', 'duplicateTagText', 'form', 'inputClass', 'invalidTagText', 'limit', 'limitTagsText', 'noTagRemove', 'placeholder', 'required', 'separator', 'size', 'state', 'tagClass', 'tagPills', 'tagRemoveLabel', 'tagVariant'])); // Generate the user interface\n\n\n    var $content = this.normalizeSlot(SLOT_NAME_DEFAULT, scope) || this.defaultRender(scope); // Generate the `aria-live` region for the current value(s)\n\n    var $output = h('output', {\n      staticClass: 'sr-only',\n      attrs: {\n        id: this.safeId('__selected_tags__'),\n        role: 'status',\n        for: computedInputId,\n        'aria-live': hasFocus ? 'polite' : 'off',\n        'aria-atomic': 'true',\n        'aria-relevant': 'additions text'\n      }\n    }, this.tags.join(', ')); // Removed tag live region\n\n    var $removed = h('div', {\n      staticClass: 'sr-only',\n      attrs: {\n        id: this.safeId('__removed_tags__'),\n        role: 'status',\n        'aria-live': hasFocus ? 'assertive' : 'off',\n        'aria-atomic': 'true'\n      }\n    }, this.removedTags.length > 0 ? \"(\".concat(this.tagRemovedLabel, \") \").concat(this.removedTags.join(', ')) : ''); // Add hidden inputs for form submission\n\n    var $hidden = h();\n\n    if (name && !disabled) {\n      // We add hidden inputs for each tag if a name is provided\n      // When there are currently no tags, a visually hidden input\n      // with empty value is rendered for proper required handling\n      var hasTags = tags.length > 0;\n      $hidden = (hasTags ? tags : ['']).map(function (tag) {\n        return h('input', {\n          class: {\n            'sr-only': !hasTags\n          },\n          attrs: {\n            type: hasTags ? 'hidden' : 'text',\n            value: tag,\n            required: required,\n            name: name,\n            form: form\n          },\n          key: \"tag_input_\".concat(tag)\n        });\n      });\n    } // Return the rendered output\n\n\n    return h('div', {\n      staticClass: 'b-form-tags form-control h-auto',\n      class: [{\n        focus: hasFocus && !noOuterFocus && !disabled,\n        disabled: disabled\n      }, this.sizeFormClass, this.stateClass],\n      attrs: {\n        id: this.safeId(),\n        role: 'group',\n        tabindex: disabled || noOuterFocus ? null : '-1',\n        'aria-describedby': this.safeId('__selected_tags__')\n      },\n      on: {\n        click: this.onClick,\n        focusin: this.onFocusin,\n        focusout: this.onFocusout\n      }\n    }, [$output, $removed, $content, $hidden]);\n  }\n});"]},"metadata":{},"sourceType":"module"}